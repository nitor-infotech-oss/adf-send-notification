{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "eureka-df-ltft2xuk6fgsc"
        },
        "AzureBlobStorage1_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
        },
        "eureka_system_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'eureka_system'"
        },
        "destination_summit_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'destination_summit'"
        },
        "other_sources_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'other_sources'"
        },
        "eureka_system_common_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'eureka_system_common'"
        },
        "source_summit_ir_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'source_summit_ir'"
        },
        "AzureBatch1_accessKey": {
            "type": "secureString",
            "metadata": "Secure string for 'accessKey' of 'AzureBatch1'"
        },
        "summit_api_source_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://eureka-aiharmanintdev.symphonysummit.com/SummitWS/REST/Summit_RESTWCF.svc/RESTService/CommonWS_JsonObjCall"
        },
        "AzureBatch1_properties_typeProperties_accountName": {
            "type": "string",
            "defaultValue": "ab7wtxzrq42aubatch"
        },
        "AzureBatch1_properties_typeProperties_batchUri": {
            "type": "string",
            "defaultValue": "https://ab7wtxzrq42aubatch.westeurope.batch.azure.com"
        },
        "AzureBatch1_properties_typeProperties_poolName": {
            "type": "string",
            "defaultValue": "etl-batch-pool"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/eureka_system')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Eureka system linked service",
                "parameters": {
                    "password": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[parameters('eureka_system_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/destination_summit')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "destination data for summit database",
                "parameters": {
                    "password": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDW",
                "typeProperties": {
                    "connectionString": "[parameters('destination_summit_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/summit_api_source')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "summit api based source",
                "annotations": [],
                "type": "HttpServer",
                "typeProperties": {
                    "url": "[parameters('summit_api_source_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": false,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/other_sources')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "server_name": {
                        "type": "string"
                    },
                    "database_name": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[parameters('other_sources_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/eureka_system_common')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "common System dbo connection storing meta level of data",
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[parameters('eureka_system_common_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/source_summit_ir')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "summit with IR",
                "parameters": {
                    "server_name": {
                        "type": "String"
                    },
                    "database_name": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    },
                    "password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[parameters('source_summit_ir_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "Southeast Asia",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 0
                        }
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SummitStageIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "SelfHosted",
                "typeProperties": {}
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureBatch1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBatch",
                "typeProperties": {
                    "accountName": "[parameters('AzureBatch1_properties_typeProperties_accountName')]",
                    "accessKey": {
                        "type": "SecureString",
                        "value": "[parameters('AzureBatch1_accessKey')]"
                    },
                    "batchUri": "[parameters('AzureBatch1_properties_typeProperties_batchUri')]",
                    "poolName": "[parameters('AzureBatch1_properties_typeProperties_poolName')]",
                    "linkedServiceName": {
                        "referenceName": "AzureBlobStorage1",
                        "type": "LinkedServiceReference"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "folder_name": {
                        "type": "string",
                        "defaultValue": "faq"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": {
                            "value": "@dataset().folder_name",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": "\t",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Catalog ID",
                        "type": "String"
                    },
                    {
                        "name": "Parent Category ID",
                        "type": "String"
                    },
                    {
                        "name": "Catalog Name",
                        "type": "String"
                    },
                    {
                        "name": "Description",
                        "type": "String"
                    },
                    {
                        "name": "Keywords",
                        "type": "String"
                    },
                    {
                        "name": "IsActive",
                        "type": "String"
                    },
                    {
                        "name": "Status",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/summit_sink')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "destination_summit",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "password": "@dataset().password",
                        "username": "@dataset().username"
                    }
                },
                "parameters": {
                    "password": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    },
                    "SinkTableName": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDWTable",
                "typeProperties": {
                    "tableName": {
                        "value": "@{dataset().SinkTableName}",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/eureka_system_common')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "eureka_system_common",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "typeProperties": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/eureka_system_common')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/summit_source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "dataset for summit source db",
                "linkedServiceName": {
                    "referenceName": "source_summit_ir",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "server_name": {
                            "value": "@dataset().server_name",
                            "type": "Expression"
                        },
                        "database_name": {
                            "value": "@dataset().database_name",
                            "type": "Expression"
                        },
                        "username": {
                            "value": "@dataset().username",
                            "type": "Expression"
                        },
                        "password": {
                            "value": "@dataset().password",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "table_name": {
                        "type": "String"
                    },
                    "server_name": {
                        "type": "String"
                    },
                    "database_name": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    },
                    "password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "SqlServerTable",
                "typeProperties": {
                    "tableName": {
                        "value": "@dataset().table_name",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/source_summit_ir')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/summit_api')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "summit_api_source",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "PageIndex": {
                        "type": "Int",
                        "defaultValue": 0
                    },
                    "TableName": {
                        "type": "String"
                    },
                    "PageSize": {
                        "type": "Int",
                        "defaultValue": 100
                    },
                    "FromDate": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "ToDate": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "IsMaxRequest": {
                        "type": "Int",
                        "defaultValue": 0
                    },
                    "Tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "Domain": {
                        "type": "String"
                    },
                    "structure": {
                        "type": "Object"
                    },
                    "jsonPathDefinition": {
                        "type": "Object"
                    }
                },
                "annotations": [],
                "type": "HttpFile",
                "structure": {
                    "value": "@dataset().structure",
                    "type": "Expression"
                },
                "typeProperties": {
                    "format": {
                        "type": "JsonFormat",
                        "filePattern": "setOfObjects",
                        "jsonNodeReference": "$.['OutputObject']['SUBROOT']",
                        "jsonPathDefinition": {
                            "value": "@dataset().jsonPathDefinition",
                            "type": "Expression"
                        }
                    },
                    "requestMethod": "POST",
                    "additionalHeaders": "Content-Type: application/json",
                    "requestBody": {
                        "value": "{\"ServiceName\": \"ADM_Get_DynamicWebServiceResult\", \"objCommonParameters\": {\"objDynamicWebService\": {\"InputString\": \"{\\\"XMLParams\\\": \\\"<Params><TableName>@{dataset().TableName}</TableName><PageIndex>@{dataset().PageIndex}</PageIndex><PageSize>@{dataset().PageSize}</PageSize><FromDate>@{dataset().FromDate}</FromDate><ToDate>@{dataset().ToDate}</ToDate><IsMaxRequest>@{dataset().IsMaxRequest}</IsMaxRequest><Tenant>@{dataset().Tenant}</Tenant><Domain>@{dataset().Domain}</Domain></Params>\\\"}\"}, \"_ProxyDetails\": {\"Password\": \"login-t4-e2\", \"UserName\": \"nanda@symphonysummit.com\", \"ProxyID\": 0, \"ReturnType\": \"JSON\", \"OrgID\": 1}, \"ServiceName\": \"USP_SUMMIT_AI_DWS_Main\"}}",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/summit_api_source')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/other_sources')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "dataset for summit source db",
                "linkedServiceName": {
                    "referenceName": "other_sources",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "server_name": {
                            "value": "@dataset().server_name",
                            "type": "Expression"
                        },
                        "database_name": {
                            "value": "@dataset().database_name",
                            "type": "Expression"
                        },
                        "username": {
                            "value": "@dataset().username",
                            "type": "Expression"
                        },
                        "password": {
                            "value": "@dataset().password",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "table_name": {
                        "type": "String"
                    },
                    "server_name": {
                        "type": "String"
                    },
                    "database_name": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    },
                    "password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "SqlServerTable",
                "typeProperties": {
                    "tableName": {
                        "value": "@dataset().table_name",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/other_sources')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/eureka_system')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "eureka_system",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "username": {
                            "value": "@dataset().username",
                            "type": "Expression"
                        },
                        "password": {
                            "value": "@dataset().password",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "username": {
                        "type": "String"
                    },
                    "password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "typeProperties": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/copy_csv_data')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "CopyCSV",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": false,
                                    "wildcardFileName": "*.*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "truncate table faq_master;"
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DelimitedText1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "folder_name": {
                                        "value": "@pipeline().parameters.folder_name",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "summit_sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "password": {
                                        "value": "@pipeline().parameters.sink_password",
                                        "type": "Expression"
                                    },
                                    "username": {
                                        "value": "@pipeline().parameters.sink_username",
                                        "type": "Expression"
                                    },
                                    "SinkTableName": "faq_master"
                                }
                            }
                        ]
                    },
                    {
                        "name": "MonitorActivity",
                        "description": "Monitor the run of this activity. ",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "CopyCSV",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_fp_monitor_success",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "LastModifiedtime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "message": {
                                    "value": {
                                        "value": "@concat( 'copy pipeline success' ,activity('CopyCSV').output)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "SUCCESS",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "faq_master",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "IT",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@pipeline().parameters.sys_password",
                                "username": "@pipeline().parameters.sys_username"
                            }
                        }
                    },
                    {
                        "name": "FailureMonitor",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "CopyCSV",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_fp_monitor_failure",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "failure_message": {
                                    "value": {
                                        "value": "@concat(activity('CopyCSV').output, activity('CopyCSV').Error)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "FAILURE",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "faq_master",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "IT",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@pipeline().parameters.sys_password",
                                "username": "@pipeline().parameters.sys_username"
                            }
                        }
                    }
                ],
                "parameters": {
                    "instance_id": {
                        "type": "string"
                    },
                    "folder_name": {
                        "type": "string",
                        "defaultValue": "faq"
                    },
                    "sink_username": {
                        "type": "string"
                    },
                    "sink_password": {
                        "type": "string"
                    },
                    "sys_username": {
                        "type": "string"
                    },
                    "sys_password": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:05Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/prepare_for_pull')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "InstanceLookup",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select sink_username, sink_password, sys_username, sys_password from instance_master where instance_id = '@{pipeline().parameters.Instance_ID}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "SqlServerStoredProcedure1",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "set_markedforpull",
                            "storedProcedureParameters": {
                                "Tenant": {
                                    "value": {
                                        "value": "@{pipeline().parameters.Tenant}",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "source_name": {
                                    "value": {
                                        "value": "@{pipeline().parameters.source_name}",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@activity('InstanceLookup').output.firstRow.sys_password",
                                "username": "@activity('InstanceLookup').output.firstRow.sys_username"
                            }
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    },
                    "Tenant": {
                        "type": "string",
                        "defaultValue": "IT"
                    },
                    "source_name": {
                        "type": "string",
                        "defaultValue": "all"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:05Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/delta-pull-SQL-Core-pipeline-others')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupOldWaterMarkActivity",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select watermarkvalue from table_injestion_monitor where Table_Name=  '@{pipeline().parameters.TABLE_NAME}' and tenant='@{pipeline().parameters.Tenant}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@pipeline().parameters.sys_username",
                                    "password": "@pipeline().parameters.sys_password"
                                }
                            }
                        }
                    },
                    {
                        "name": "LookupNewWaterMarkActivity",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "lookup_linked_service",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@coalesce( pipeline().parameters.lookupnewwatermark, replace(replace(pipeline().parameters.copyquery, '@tenant', pipeline().parameters.Tenant) ,\n'a.*', concat( 'MAX(a.' , pipeline().parameters.WaterMark_Column, ') as NewWatermarkvalue')))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "other_sources",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": "@pipeline().parameters.TABLE_NAME",
                                    "server_name": "@activity('lookup_linked_service').output.firstRow.server_name",
                                    "database_name": "@activity('lookup_linked_service').output.firstRow.database_name",
                                    "username": "@activity('lookup_linked_service').output.firstRow.username",
                                    "password": "@activity('lookup_linked_service').output.firstRow.password"
                                }
                            }
                        }
                    },
                    {
                        "name": "IncrementalCopyActivity",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "LookupOldWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupNewWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [
                            {
                                "name": "Source",
                                "value": "@{pipeline().parameters.TABLE_NAME}"
                            },
                            {
                                "name": "Destination",
                                "value": "@{pipeline().parameters.temp_table}"
                            }
                        ],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@if(equals(pipeline().parameters.Tenant_Column,''),concat( pipeline().parameters.copyquery,' where a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';' ),concat( if(equals(pipeline().parameters.source_name,'source2'),replace( pipeline().parameters.copyquery, '@tenant' , pipeline().parameters.gc_tenant),replace( pipeline().parameters.copyquery, '@tenant' , pipeline().parameters.Tenant)) ,  ' and a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';' ))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "writeBatchSize": 10000,
                                "preCopyScript": {
                                    "value": "truncate table @{pipeline().parameters.temp_table};",
                                    "type": "Expression"
                                }
                            },
                            "enableStaging": false,
                            "dataIntegrationUnits": 0
                        },
                        "inputs": [
                            {
                                "referenceName": "other_sources",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": "@pipeline().parameters.TABLE_NAME",
                                    "server_name": "@activity('lookup_linked_service').output.firstRow.server_name",
                                    "database_name": "@activity('lookup_linked_service').output.firstRow.database_name",
                                    "username": "@activity('lookup_linked_service').output.firstRow.username",
                                    "password": "@activity('lookup_linked_service').output.firstRow.password"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "summit_sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "password": "@pipeline().parameters.sink_password",
                                    "username": "@pipeline().parameters.sink_username",
                                    "SinkTableName": {
                                        "value": "@pipeline().parameters.temp_table",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "StoredProcedureToUpsert",
                        "description": "calling stored procedure to call move data from temporary table to upsert in permanent table",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If Condition1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": {
                                "value": "eu_execute",
                                "type": "Expression"
                            },
                            "storedProcedureParameters": {
                                "statement": {
                                    "value": {
                                        "value": "@pipeline().parameters.upsertquery",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "destination_summit",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": {
                                    "value": "@pipeline().parameters.sink_password",
                                    "type": "Expression"
                                },
                                "username": {
                                    "value": "@pipeline().parameters.sink_username",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "MonitorActivity",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "StoredProcedureToUpsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_fp_monitor_success",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "LastModifiedtime": {
                                    "value": {
                                        "value": "@activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "message": {
                                    "value": {
                                        "value": "@activity('IncrementalCopyActivity').output",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().parameters.runId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "SUCCESS",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "@pipeline().parameters.TABLE_NAME",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                },
                                "username": {
                                    "value": "@pipeline().parameters.sys_username",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "lookup_linked_service",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select  JSON_VALUE(source_credentials_json, '$.server_name') as server_name, JSON_VALUE(source_credentials_json, '$.database_name') as database_name,JSON_VALUE(source_credentials_json, '$.username') as username, JSON_VALUE(source_credentials_json, '$.password') as password from source_master where instance_id='@{pipeline().parameters.Instance_ID}' and source_name = '@{pipeline().parameters.source_name}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "If Condition1",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "IncrementalCopyActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(equals(pipeline().parameters.source_name,'source2'),contains(pipeline().parameters.copyquery,'@tenant'))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Stored procedure1",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_execute",
                                        "storedProcedureParameters": {
                                            "statement": {
                                                "value": {
                                                    "value": "@concat('UPDATE ', pipeline().parameters.SINK_TABLE_NAME, ' SET Tenant= ', pipeline().parameters.quote_single, pipeline().parameters.Tenant, pipeline().parameters.quote_single,' where a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "destination_summit",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": {
                                                "value": "@pipeline().parameters.sink_password",
                                                "type": "Expression"
                                            },
                                            "username": {
                                                "value": "@pipeline().parameters.sink_username",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "TABLE_NAME": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "WaterMark_Column": {
                        "type": "String",
                        "defaultValue": "UpdatedDateForAI"
                    },
                    "Tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "upsertquery": {
                        "type": "String",
                        "defaultValue": "select 1;"
                    },
                    "temp_table": {
                        "type": "Object",
                        "defaultValue": "temp_IT_IM_SLA_Master"
                    },
                    "quote_single": {
                        "type": "string"
                    },
                    "SINK_TABLE_NAME": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "copyquery": {
                        "type": "String",
                        "defaultValue": "SELECT a.* FROM IM_SLA_Master a WITH (NOLOCK) where a.sup_function ="
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "Instance_ID": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    },
                    "lookupnewwatermark": {
                        "type": "string"
                    },
                    "tenant_column": {
                        "type": "string"
                    },
                    "source_name": {
                        "type": "string"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "runId": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:45:36Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/other_sources')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]",
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]"
            ]
        }
    ]
}