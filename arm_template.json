{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "eureka-df-ltft2xuk6fgsc"
        },
        "AzureBlobStorage1_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
        },
        "eureka_system_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'eureka_system'"
        },
        "destination_summit_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'destination_summit'"
        },
        "other_sources_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'other_sources'"
        },
        "eureka_system_common_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'eureka_system_common'"
        },
        "source_summit_ir_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'source_summit_ir'"
        },
        "AzureBatch1_accessKey": {
            "type": "secureString",
            "metadata": "Secure string for 'accessKey' of 'AzureBatch1'"
        },
        "summit_api_source_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://eureka-aiharmanintdev.symphonysummit.com/SummitWS/REST/Summit_RESTWCF.svc/RESTService/CommonWS_JsonObjCall"
        },
        "AzureBatch1_properties_typeProperties_accountName": {
            "type": "string",
            "defaultValue": "ab7wtxzrq42aubatch"
        },
        "AzureBatch1_properties_typeProperties_batchUri": {
            "type": "string",
            "defaultValue": "https://ab7wtxzrq42aubatch.westeurope.batch.azure.com"
        },
        "AzureBatch1_properties_typeProperties_poolName": {
            "type": "string",
            "defaultValue": "etl-batch-pool"
        },
        "mark-for-pull-trigger_properties_prepare_for_pull_parameters_Instance_ID": {
            "type": "string",
            "defaultValue": "mstest5"
        },
        "first-pull-trigger_properties_instance_sql_firstpull_DW_parameters_Instance_ID": {
            "type": "string",
            "defaultValue": "mstest5"
        },
        "delta-trigger_properties_tenant-SQL-delta-pull-pipeline_DW_parameters_Instance_ID": {
            "type": "string",
            "defaultValue": "mstest4"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/eureka_system')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Eureka system linked service",
                "parameters": {
                    "password": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[parameters('eureka_system_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/destination_summit')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "destination data for summit database",
                "parameters": {
                    "password": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDW",
                "typeProperties": {
                    "connectionString": "[parameters('destination_summit_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/summit_api_source')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "summit api based source",
                "annotations": [],
                "type": "HttpServer",
                "typeProperties": {
                    "url": "[parameters('summit_api_source_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": false,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/other_sources')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "server_name": {
                        "type": "string"
                    },
                    "database_name": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[parameters('other_sources_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/eureka_system_common')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "common System dbo connection storing meta level of data",
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[parameters('eureka_system_common_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/source_summit_ir')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "summit with IR",
                "parameters": {
                    "server_name": {
                        "type": "String"
                    },
                    "database_name": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    },
                    "password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[parameters('source_summit_ir_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureBatch1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBatch",
                "typeProperties": {
                    "accountName": "[parameters('AzureBatch1_properties_typeProperties_accountName')]",
                    "accessKey": {
                        "type": "SecureString",
                        "value": "[parameters('AzureBatch1_accessKey')]"
                    },
                    "batchUri": "[parameters('AzureBatch1_properties_typeProperties_batchUri')]",
                    "poolName": "[parameters('AzureBatch1_properties_typeProperties_poolName')]",
                    "linkedServiceName": {
                        "referenceName": "AzureBlobStorage1",
                        "type": "LinkedServiceReference"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "Southeast Asia",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 0
                        }
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SummitStageIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "SelfHosted",
                "typeProperties": {}
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "folder_name": {
                        "type": "string",
                        "defaultValue": "faq"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": {
                            "value": "@dataset().folder_name",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": "\t",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Catalog ID",
                        "type": "String"
                    },
                    {
                        "name": "Parent Category ID",
                        "type": "String"
                    },
                    {
                        "name": "Catalog Name",
                        "type": "String"
                    },
                    {
                        "name": "Description",
                        "type": "String"
                    },
                    {
                        "name": "Keywords",
                        "type": "String"
                    },
                    {
                        "name": "IsActive",
                        "type": "String"
                    },
                    {
                        "name": "Status",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/summit_sink')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "destination_summit",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "password": "@dataset().password",
                        "username": "@dataset().username"
                    }
                },
                "parameters": {
                    "password": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    },
                    "SinkTableName": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDWTable",
                "typeProperties": {
                    "tableName": {
                        "value": "@{dataset().SinkTableName}",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/eureka_system_common')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "eureka_system_common",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "typeProperties": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/eureka_system_common')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/summit_source')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "dataset for summit source db",
                "linkedServiceName": {
                    "referenceName": "source_summit_ir",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "server_name": {
                            "value": "@dataset().server_name",
                            "type": "Expression"
                        },
                        "database_name": {
                            "value": "@dataset().database_name",
                            "type": "Expression"
                        },
                        "username": {
                            "value": "@dataset().username",
                            "type": "Expression"
                        },
                        "password": {
                            "value": "@dataset().password",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "table_name": {
                        "type": "String"
                    },
                    "server_name": {
                        "type": "String"
                    },
                    "database_name": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    },
                    "password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "SqlServerTable",
                "typeProperties": {
                    "tableName": {
                        "value": "@dataset().table_name",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/source_summit_ir')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/summit_api')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "summit_api_source",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "PageIndex": {
                        "type": "Int",
                        "defaultValue": 0
                    },
                    "TableName": {
                        "type": "String"
                    },
                    "PageSize": {
                        "type": "Int",
                        "defaultValue": 100
                    },
                    "FromDate": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "ToDate": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "IsMaxRequest": {
                        "type": "Int",
                        "defaultValue": 0
                    },
                    "Tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "Domain": {
                        "type": "String"
                    },
                    "structure": {
                        "type": "Object"
                    },
                    "jsonPathDefinition": {
                        "type": "Object"
                    }
                },
                "annotations": [],
                "type": "HttpFile",
                "structure": {
                    "value": "@dataset().structure",
                    "type": "Expression"
                },
                "typeProperties": {
                    "format": {
                        "type": "JsonFormat",
                        "filePattern": "setOfObjects",
                        "jsonNodeReference": "$.['OutputObject']['SUBROOT']",
                        "jsonPathDefinition": {
                            "value": "@dataset().jsonPathDefinition",
                            "type": "Expression"
                        }
                    },
                    "requestMethod": "POST",
                    "additionalHeaders": "Content-Type: application/json",
                    "requestBody": {
                        "value": "{\"ServiceName\": \"ADM_Get_DynamicWebServiceResult\", \"objCommonParameters\": {\"objDynamicWebService\": {\"InputString\": \"{\\\"XMLParams\\\": \\\"<Params><TableName>@{dataset().TableName}</TableName><PageIndex>@{dataset().PageIndex}</PageIndex><PageSize>@{dataset().PageSize}</PageSize><FromDate>@{dataset().FromDate}</FromDate><ToDate>@{dataset().ToDate}</ToDate><IsMaxRequest>@{dataset().IsMaxRequest}</IsMaxRequest><Tenant>@{dataset().Tenant}</Tenant><Domain>@{dataset().Domain}</Domain></Params>\\\"}\"}, \"_ProxyDetails\": {\"Password\": \"login-t4-e2\", \"UserName\": \"nanda@symphonysummit.com\", \"ProxyID\": 0, \"ReturnType\": \"JSON\", \"OrgID\": 1}, \"ServiceName\": \"USP_SUMMIT_AI_DWS_Main\"}}",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/summit_api_source')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/other_sources')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "dataset for summit source db",
                "linkedServiceName": {
                    "referenceName": "other_sources",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "server_name": {
                            "value": "@dataset().server_name",
                            "type": "Expression"
                        },
                        "database_name": {
                            "value": "@dataset().database_name",
                            "type": "Expression"
                        },
                        "username": {
                            "value": "@dataset().username",
                            "type": "Expression"
                        },
                        "password": {
                            "value": "@dataset().password",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "table_name": {
                        "type": "String"
                    },
                    "server_name": {
                        "type": "String"
                    },
                    "database_name": {
                        "type": "String"
                    },
                    "username": {
                        "type": "String"
                    },
                    "password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "SqlServerTable",
                "typeProperties": {
                    "tableName": {
                        "value": "@dataset().table_name",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/other_sources')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/eureka_system')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "eureka_system",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "username": {
                            "value": "@dataset().username",
                            "type": "Expression"
                        },
                        "password": {
                            "value": "@dataset().password",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "username": {
                        "type": "String"
                    },
                    "password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "typeProperties": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/mark-for-pull-trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "prepare_for_pull",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Instance_ID": "[parameters('mark-for-pull-trigger_properties_prepare_for_pull_parameters_Instance_ID')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Hour",
                        "interval": 4,
                        "startTime": "2019-11-25T06:45:00Z",
                        "endTime": "2019-12-13T18:45:00Z",
                        "timeZone": "UTC"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/prepare_for_pull')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/first-pull-trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "instance_sql_firstpull_DW",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Instance_ID": "[parameters('first-pull-trigger_properties_instance_sql_firstpull_DW_parameters_Instance_ID')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Hour",
                        "interval": 4,
                        "startTime": "2019-11-25T06:50:00Z",
                        "endTime": "2019-12-13T06:50:00Z",
                        "timeZone": "UTC"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/instance_sql_firstpull_DW')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/delta-trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "tenant-SQL-delta-pull-pipeline_DW",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Instance_ID": "[parameters('delta-trigger_properties_tenant-SQL-delta-pull-pipeline_DW_parameters_Instance_ID')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Hour",
                        "interval": 4,
                        "startTime": "2019-11-25T06:50:00Z",
                        "endTime": "2019-12-06T18:50:00Z",
                        "timeZone": "UTC"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/tenant-SQL-delta-pull-pipeline_DW')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/copy_csv_data')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "CopyCSV",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": false,
                                    "wildcardFileName": "*.*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "truncate table faq_master;"
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DelimitedText1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "folder_name": {
                                        "value": "@pipeline().parameters.folder_name",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "summit_sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "password": {
                                        "value": "@pipeline().parameters.sink_password",
                                        "type": "Expression"
                                    },
                                    "username": {
                                        "value": "@pipeline().parameters.sink_username",
                                        "type": "Expression"
                                    },
                                    "SinkTableName": "faq_master"
                                }
                            }
                        ]
                    },
                    {
                        "name": "MonitorActivity",
                        "description": "Monitor the run of this activity. ",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "CopyCSV",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_fp_monitor_success",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "LastModifiedtime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "message": {
                                    "value": {
                                        "value": "@concat( 'copy pipeline success' ,activity('CopyCSV').output)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "SUCCESS",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "faq_master",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "IT",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@pipeline().parameters.sys_password",
                                "username": "@pipeline().parameters.sys_username"
                            }
                        }
                    },
                    {
                        "name": "FailureMonitor",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "CopyCSV",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_fp_monitor_failure",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "failure_message": {
                                    "value": {
                                        "value": "@concat(activity('CopyCSV').output, activity('CopyCSV').Error)",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "FAILURE",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "faq_master",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "IT",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@pipeline().parameters.sys_password",
                                "username": "@pipeline().parameters.sys_username"
                            }
                        }
                    }
                ],
                "parameters": {
                    "instance_id": {
                        "type": "string"
                    },
                    "folder_name": {
                        "type": "string",
                        "defaultValue": "faq"
                    },
                    "sink_username": {
                        "type": "string"
                    },
                    "sink_password": {
                        "type": "string"
                    },
                    "sys_username": {
                        "type": "string"
                    },
                    "sys_password": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:05Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/prepare_for_pull')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "InstanceLookup",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select sink_username, sink_password, sys_username, sys_password from instance_master where instance_id = '@{pipeline().parameters.Instance_ID}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "SqlServerStoredProcedure1",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "set_markedforpull",
                            "storedProcedureParameters": {
                                "Tenant": {
                                    "value": {
                                        "value": "@{pipeline().parameters.Tenant}",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "source_name": {
                                    "value": {
                                        "value": "@{pipeline().parameters.source_name}",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@activity('InstanceLookup').output.firstRow.sys_password",
                                "username": "@activity('InstanceLookup').output.firstRow.sys_username"
                            }
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    },
                    "Tenant": {
                        "type": "string",
                        "defaultValue": "IT"
                    },
                    "source_name": {
                        "type": "string",
                        "defaultValue": "all"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:05Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/delta-pull-SQL-Core-pipeline-others')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupOldWaterMarkActivity",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select watermarkvalue from table_injestion_monitor where Table_Name=  '@{pipeline().parameters.TABLE_NAME}' and tenant='@{pipeline().parameters.Tenant}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@pipeline().parameters.sys_username",
                                    "password": "@pipeline().parameters.sys_password"
                                }
                            }
                        }
                    },
                    {
                        "name": "LookupNewWaterMarkActivity",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "lookup_linked_service",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@coalesce( pipeline().parameters.lookupnewwatermark, replace(replace(pipeline().parameters.copyquery, '@tenant', pipeline().parameters.Tenant) ,\n'a.*', concat( 'MAX(a.' , pipeline().parameters.WaterMark_Column, ') as NewWatermarkvalue')))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "other_sources",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": "@pipeline().parameters.TABLE_NAME",
                                    "server_name": "@activity('lookup_linked_service').output.firstRow.server_name",
                                    "database_name": "@activity('lookup_linked_service').output.firstRow.database_name",
                                    "username": "@activity('lookup_linked_service').output.firstRow.username",
                                    "password": "@activity('lookup_linked_service').output.firstRow.password"
                                }
                            }
                        }
                    },
                    {
                        "name": "IncrementalCopyActivity",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "LookupOldWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupNewWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [
                            {
                                "name": "Source",
                                "value": "@{pipeline().parameters.TABLE_NAME}"
                            },
                            {
                                "name": "Destination",
                                "value": "@{pipeline().parameters.temp_table}"
                            }
                        ],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@if(equals(pipeline().parameters.Tenant_Column,''),concat( pipeline().parameters.copyquery,' where a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';' ),concat( if(equals(pipeline().parameters.source_name,'source2'),replace( pipeline().parameters.copyquery, '@tenant' , pipeline().parameters.gc_tenant),replace( pipeline().parameters.copyquery, '@tenant' , pipeline().parameters.Tenant)) ,  ' and a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';' ))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "writeBatchSize": 10000,
                                "preCopyScript": {
                                    "value": "truncate table @{pipeline().parameters.temp_table};",
                                    "type": "Expression"
                                }
                            },
                            "enableStaging": false,
                            "dataIntegrationUnits": 0
                        },
                        "inputs": [
                            {
                                "referenceName": "other_sources",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": "@pipeline().parameters.TABLE_NAME",
                                    "server_name": "@activity('lookup_linked_service').output.firstRow.server_name",
                                    "database_name": "@activity('lookup_linked_service').output.firstRow.database_name",
                                    "username": "@activity('lookup_linked_service').output.firstRow.username",
                                    "password": "@activity('lookup_linked_service').output.firstRow.password"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "summit_sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "password": "@pipeline().parameters.sink_password",
                                    "username": "@pipeline().parameters.sink_username",
                                    "SinkTableName": {
                                        "value": "@pipeline().parameters.temp_table",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "StoredProcedureToUpsert",
                        "description": "calling stored procedure to call move data from temporary table to upsert in permanent table",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If Condition1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": {
                                "value": "eu_execute",
                                "type": "Expression"
                            },
                            "storedProcedureParameters": {
                                "statement": {
                                    "value": {
                                        "value": "@pipeline().parameters.upsertquery",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "destination_summit",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": {
                                    "value": "@pipeline().parameters.sink_password",
                                    "type": "Expression"
                                },
                                "username": {
                                    "value": "@pipeline().parameters.sink_username",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "MonitorActivity",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "StoredProcedureToUpsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_fp_monitor_success",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "LastModifiedtime": {
                                    "value": {
                                        "value": "@activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "message": {
                                    "value": {
                                        "value": "@activity('IncrementalCopyActivity').output",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().parameters.runId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "SUCCESS",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "@pipeline().parameters.TABLE_NAME",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                },
                                "username": {
                                    "value": "@pipeline().parameters.sys_username",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "lookup_linked_service",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select  JSON_VALUE(source_credentials_json, '$.server_name') as server_name, JSON_VALUE(source_credentials_json, '$.database_name') as database_name,JSON_VALUE(source_credentials_json, '$.username') as username, JSON_VALUE(source_credentials_json, '$.password') as password from source_master where instance_id='@{pipeline().parameters.Instance_ID}' and source_name = '@{pipeline().parameters.source_name}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "If Condition1",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "IncrementalCopyActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(equals(pipeline().parameters.source_name,'source2'),contains(pipeline().parameters.copyquery,'@tenant'))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Stored procedure1",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_execute",
                                        "storedProcedureParameters": {
                                            "statement": {
                                                "value": {
                                                    "value": "@concat('UPDATE ', pipeline().parameters.SINK_TABLE_NAME, ' SET Tenant= ', pipeline().parameters.quote_single, pipeline().parameters.Tenant, pipeline().parameters.quote_single,' where a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "destination_summit",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": {
                                                "value": "@pipeline().parameters.sink_password",
                                                "type": "Expression"
                                            },
                                            "username": {
                                                "value": "@pipeline().parameters.sink_username",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "TABLE_NAME": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "WaterMark_Column": {
                        "type": "String",
                        "defaultValue": "UpdatedDateForAI"
                    },
                    "Tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "upsertquery": {
                        "type": "String",
                        "defaultValue": "select 1;"
                    },
                    "temp_table": {
                        "type": "Object",
                        "defaultValue": "temp_IT_IM_SLA_Master"
                    },
                    "quote_single": {
                        "type": "string"
                    },
                    "SINK_TABLE_NAME": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "copyquery": {
                        "type": "String",
                        "defaultValue": "SELECT a.* FROM IM_SLA_Master a WITH (NOLOCK) where a.sup_function ="
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "Instance_ID": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    },
                    "lookupnewwatermark": {
                        "type": "string"
                    },
                    "tenant_column": {
                        "type": "string"
                    },
                    "source_name": {
                        "type": "string"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "runId": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:45:36Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/other_sources')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]",
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/delta-pull-SQL-Core-pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupOldWaterMarkActivity",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select watermarkvalue from table_injestion_monitor where Table_Name=  '@{pipeline().parameters.TABLE_NAME}' and tenant='@{pipeline().parameters.Tenant}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@pipeline().parameters.sys_username",
                                    "password": "@pipeline().parameters.sys_password"
                                }
                            }
                        }
                    },
                    {
                        "name": "LookupNewWaterMarkActivity",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "lookup_linked_service",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "@coalesce( pipeline().parameters.lookupnewwatermark, replace(replace(pipeline().parameters.copyquery, '@tenant', pipeline().parameters.Tenant) ,\n'a.*', concat( 'MAX(a.' , pipeline().parameters.WaterMark_Column, ') as NewWatermarkvalue')))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "summit_source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": {
                                        "value": "@pipeline().parameters.TABLE_NAME",
                                        "type": "Expression"
                                    },
                                    "server_name": {
                                        "value": "@activity('lookup_linked_service').output.firstRow.server_name",
                                        "type": "Expression"
                                    },
                                    "database_name": {
                                        "value": "@activity('lookup_linked_service').output.firstRow.database_name",
                                        "type": "Expression"
                                    },
                                    "username": {
                                        "value": "@activity('lookup_linked_service').output.firstRow.username",
                                        "type": "Expression"
                                    },
                                    "password": {
                                        "value": "@activity('lookup_linked_service').output.firstRow.password",
                                        "type": "Expression"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "IncrementalCopyActivity",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "LookupOldWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupNewWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [
                            {
                                "name": "Source",
                                "value": "@{pipeline().parameters.TABLE_NAME}"
                            },
                            {
                                "name": "Destination",
                                "value": "@{pipeline().parameters.temp_table}"
                            }
                        ],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "@if(equals(pipeline().parameters.Tenant_Column,''),concat( pipeline().parameters.copyquery,' where a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';' ),concat( if(equals(pipeline().parameters.source_name,'source2'),replace(pipeline().parameters.copyquery, '@tenant', pipeline().parameters.gc_tenant),replace(pipeline().parameters.copyquery, '@tenant', pipeline().parameters.Tenant)) ,  ' and a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';' ))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "writeBatchSize": 10000,
                                "preCopyScript": {
                                    "value": "truncate table @{pipeline().parameters.temp_table};",
                                    "type": "Expression"
                                }
                            },
                            "enableStaging": false,
                            "dataIntegrationUnits": 0
                        },
                        "inputs": [
                            {
                                "referenceName": "summit_source",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": {
                                        "value": "@pipeline().parameters.TABLE_NAME",
                                        "type": "Expression"
                                    },
                                    "server_name": {
                                        "value": "@activity('lookup_linked_service').output.firstRow.server_name",
                                        "type": "Expression"
                                    },
                                    "database_name": {
                                        "value": "@activity('lookup_linked_service').output.firstRow.database_name",
                                        "type": "Expression"
                                    },
                                    "username": {
                                        "value": "@activity('lookup_linked_service').output.firstRow.username",
                                        "type": "Expression"
                                    },
                                    "password": {
                                        "value": "@activity('lookup_linked_service').output.firstRow.password",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "summit_sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "password": "@pipeline().parameters.sink_password",
                                    "username": "@pipeline().parameters.sink_username",
                                    "SinkTableName": {
                                        "value": "@pipeline().parameters.temp_table",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "StoredProcedureToUpsert",
                        "description": "calling stored procedure to call move data from temporary table to upsert in permanent table",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If Condition1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": {
                                "value": "eu_execute",
                                "type": "Expression"
                            },
                            "storedProcedureParameters": {
                                "statement": {
                                    "value": {
                                        "value": "@pipeline().parameters.upsertquery",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "destination_summit",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": {
                                    "value": "@pipeline().parameters.sink_password",
                                    "type": "Expression"
                                },
                                "username": {
                                    "value": "@pipeline().parameters.sink_username",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "MonitorActivity",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "StoredProcedureToUpsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_fp_monitor_success",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "LastModifiedtime": {
                                    "value": {
                                        "value": "@activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "message": {
                                    "value": {
                                        "value": "@activity('IncrementalCopyActivity').output",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().parameters.runId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "SUCCESS",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "@pipeline().parameters.TABLE_NAME",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                },
                                "username": {
                                    "value": "@pipeline().parameters.sys_username",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "lookup_linked_service",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select  JSON_VALUE(source_credentials_json, '$.server_name') as server_name, JSON_VALUE(source_credentials_json, '$.database_name') as database_name,JSON_VALUE(source_credentials_json, '$.username') as username, JSON_VALUE(source_credentials_json, '$.password') as password from source_master where instance_id='@{pipeline().parameters.Instance_ID}' and source_name = '@{pipeline().parameters.source_name}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "If Condition1",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "IncrementalCopyActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(equals(pipeline().parameters.source_name,'source2'),contains(pipeline().parameters.copyquery,'@tenant'))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Stored procedure1",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_execute",
                                        "storedProcedureParameters": {
                                            "statement": {
                                                "value": {
                                                    "value": "@concat('UPDATE ', pipeline().parameters.SINK_TABLE_NAME, ' SET Tenant= ', pipeline().parameters.quote_single,pipeline().parameters.Tenant,pipeline().parameters.quote_single,' where a.', pipeline().parameters.WaterMark_Column, ' > ', pipeline().parameters.quote_single, activity('LookupOldWaterMarkActivity').output.firstRow.watermarkvalue, pipeline().parameters.quote_single, ' and a.', pipeline().parameters.WaterMark_Column, ' <= ', pipeline().parameters.quote_single, activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue, pipeline().parameters.quote_single, ';')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "destination_summit",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": {
                                                "value": "@pipeline().parameters.sink_password",
                                                "type": "Expression"
                                            },
                                            "username": {
                                                "value": "@pipeline().parameters.sink_username",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "TABLE_NAME": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "WaterMark_Column": {
                        "type": "String",
                        "defaultValue": "UpdatedDateForAI"
                    },
                    "Tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "upsertquery": {
                        "type": "String",
                        "defaultValue": "select 1;"
                    },
                    "temp_table": {
                        "type": "Object",
                        "defaultValue": "temp_IT_IM_SLA_Master"
                    },
                    "quote_single": {
                        "type": "string"
                    },
                    "SINK_TABLE_NAME": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "copyquery": {
                        "type": "String",
                        "defaultValue": "SELECT a.* FROM IM_SLA_Master a WITH (NOLOCK) where a.sup_function ="
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "Instance_ID": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    },
                    "lookupnewwatermark": {
                        "type": "string"
                    },
                    "tenant_column": {
                        "type": "string"
                    },
                    "source_name": {
                        "type": "string"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "runId": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:45:36Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/summit_source')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]",
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Copy_SQL_pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "FetchItemsToProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@Activity('FetchItemsToProcess').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "CopyActivity",
                                    "description": "Copy data from source table to sink db. ",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "LookupNewWaterMarkActivity",
                                            "dependencyConditions": [
                                                "Succeeded",
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [
                                        {
                                            "name": "Source",
                                            "value": "@{item().TABLE_NAME}"
                                        },
                                        {
                                            "name": "Destination",
                                            "value": "@{concat(item().SINK_TABLE_NAME, ' ')}"
                                        }
                                    ],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlSource",
                                            "sqlReaderQuery": {
                                                "value": "@if(equals(pipeline().parameters.source_name,'source2'),replace(item().copyquery, '@tenant', pipeline().parameters.gc_tenant),replace(item().copyquery, '@tenant', pipeline().parameters.Tenant))",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "writeBatchSize": 10000
                                        },
                                        "enableStaging": false,
                                        "dataIntegrationUnits": 0
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "summit_source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "table_name": "@item().TABLE_NAME",
                                                "server_name": {
                                                    "value": "@activity('lookup_linked_service').output.firstRow.server_name",
                                                    "type": "Expression"
                                                },
                                                "database_name": {
                                                    "value": "@activity('lookup_linked_service').output.firstRow.database_name",
                                                    "type": "Expression"
                                                },
                                                "username": {
                                                    "value": "@activity('lookup_linked_service').output.firstRow.username",
                                                    "type": "Expression"
                                                },
                                                "password": {
                                                    "value": "@activity('lookup_linked_service').output.firstRow.password",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "summit_sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "password": "@pipeline().parameters.sink_password",
                                                "username": "@pipeline().parameters.sink_username",
                                                "SinkTableName": "@{item().SINK_TABLE_NAME} "
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "MonitorActivity",
                                    "description": "Monitor the run of this activity. ",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "If Condition1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_fp_monitor_success",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "LastModifiedtime": {
                                                "value": {
                                                    "value": "@coalesce( activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue , adddays(utcnow(), -2) )",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "message": {
                                                "value": {
                                                    "value": "@concat( 'copy pipeline success' ,activity('CopyActivity').output)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().parameters.runId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "SUCCESS",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@item().TABLE_NAME",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.Tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@pipeline().parameters.sys_password",
                                            "username": "@pipeline().parameters.sys_username"
                                        }
                                    }
                                },
                                {
                                    "name": "LookupNewWaterMarkActivity",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "preCopyCleanUP",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "lookup_linked_service",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlSource",
                                            "sqlReaderQuery": {
                                                "value": "@coalesce( if(equals(item().lookupnewwatermark,''),NULL,item().lookupnewwatermark), replace( replace( item().copyquery, '@tenant', pipeline().parameters.Tenant), 'a.*', concat( 'MAX(a.' , item().WaterMark_Column, ') as NewWatermarkvalue' ) ))",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "summit_source",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "table_name": "@item().TABLE_NAME",
                                                "server_name": {
                                                    "value": "@activity('lookup_linked_service').output.firstRow.server_name",
                                                    "type": "Expression"
                                                },
                                                "database_name": {
                                                    "value": "@activity('lookup_linked_service').output.firstRow.database_name",
                                                    "type": "Expression"
                                                },
                                                "username": {
                                                    "value": "@activity('lookup_linked_service').output.firstRow.username",
                                                    "type": "Expression"
                                                },
                                                "password": {
                                                    "value": "@activity('lookup_linked_service').output.firstRow.password",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "preCopyCleanUP",
                                    "description": "delete relevant data from DW. for particular tenant",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_execute",
                                        "storedProcedureParameters": {
                                            "statement": {
                                                "value": {
                                                    "value": "@replace(coalesce( item().precopycleanup , concat( 'DELETE FROM ', item().SINK_TABLE_NAME, ' where ', item().primary_column, ' IN ( ', replace( replace( replace( item().copyquery,'*, ''tenant''' , '*' ) , 'tenant', pipeline().parameters.Tenant) , '*', item().primary_column ), ' );' )),'@tenant', pipeline().parameters.Tenant)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "destination_summit",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@pipeline().parameters.sink_password",
                                            "username": "@pipeline().parameters.sink_username"
                                        }
                                    }
                                },
                                {
                                    "name": "FailureMonitor",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "CopyActivity",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_fp_monitor_failure",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('CopyActivity').output, activity('CopyActivity').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().parameters.runId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "FAILURE",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@item().TABLE_NAME",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.Tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@pipeline().parameters.sys_password",
                                            "username": "@pipeline().parameters.sys_username"
                                        }
                                    }
                                },
                                {
                                    "name": "lookup_linked_service",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlSource",
                                            "sqlReaderQuery": {
                                                "value": "select  JSON_VALUE(source_credentials_json, '$.server_name') as server_name, JSON_VALUE(source_credentials_json, '$.database_name') as database_name,JSON_VALUE(source_credentials_json, '$.username') as username, JSON_VALUE(source_credentials_json, '$.password') as password from source_master where instance_id='@{pipeline().parameters.Instance_ID}' and source_name = '@{pipeline().parameters.source_name}'",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "eureka_system_common",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    }
                                },
                                {
                                    "name": "If Condition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "CopyActivity",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(equals(pipeline().parameters.source_name,'source2'),contains(item().copyquery,'tenant'))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Stored procedure1",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_execute",
                                                    "storedProcedureParameters": {
                                                        "statement": {
                                                            "value": {
                                                                "value": "@concat( 'UPDATE ', item().SINK_TABLE_NAME, ' SET Tenant= ', pipeline().parameters.singleQuote,pipeline().parameters.Tenant,pipeline().parameters.singleQuote)",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "destination_summit",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": {
                                                            "value": "@pipeline().parameters.sink_password",
                                                            "type": "Expression"
                                                        },
                                                        "username": {
                                                            "value": "@pipeline().parameters.sink_username",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "FetchItemsToProcess",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "InitPipelineProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select a.table_name, a.watermark_column, a.uid_column as primary_column, \na.copyquery, a.table_name as sink_table_name, a.precopycleanup as precopycleanup, a.lookupnewwatermark as lookupnewwatermark\nfrom table_master a\nINNER JOIN table_injestion_monitor b  ON a.table_name = b.table_name  WHERE b.RUNID = '@{pipeline().RunId}' and b.source_name = '@{pipeline().parameters.source_name}' and a.SOR = '@{pipeline().parameters.SOR}' ;",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@pipeline().parameters.sys_username",
                                    "password": "@pipeline().parameters.sys_password"
                                }
                            },
                            "firstRowOnly": {
                                "value": "False",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "InitPipelineProcess",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_pull_init",
                            "storedProcedureParameters": {
                                "domain": {
                                    "value": {
                                        "value": "@pipeline().parameters.domain",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "FirstPull": {
                                    "value": {
                                        "value": "@pipeline().parameters.FirstPull",
                                        "type": "Expression"
                                    },
                                    "type": "Boolean"
                                },
                                "IsDeltaPullPipeline": {
                                    "value": {
                                        "value": "@pipeline().parameters.IsDeltaPullPipeline",
                                        "type": "Expression"
                                    },
                                    "type": "Boolean"
                                },
                                "RUNID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "SOR": {
                                    "value": {
                                        "value": "@pipeline().parameters.SOR",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "source_name": {
                                    "value": {
                                        "value": "@pipeline().parameters.source_name",
                                        "type": "Expression"
                                    }
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@pipeline().parameters.sys_password",
                                "username": "@pipeline().parameters.sys_username"
                            }
                        }
                    },
                    {
                        "name": "serviceBusNotification",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://eureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net/general/messages",
                            "method": "POST",
                            "headers": {
                                "Authorization": "SharedAccessSignature sr=http%3A%2F%2Feureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net%2F&sig=ojF8%2BSnw6RY2j7tsexRpkM3DSpZ2AbDEeE76J3mPf%2Bo%3D&se=1632212088&skn=Send",
                                "Content-Type": "application/json",
                                "component": "data_ingestion",
                                "event": "pipeline_completed"
                            },
                            "body": {
                                "value": "{ \"pipeline_name\": '@{pipeline().Pipeline}', \"tenant\" : '@{pipeline().parameters.Tenant}', \"domain\" : '@{pipeline().parameters.domain}', \"first_pull\" : '@{pipeline().parameters.FirstPull}'\n}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "domain": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "SOR": {
                        "type": "String",
                        "defaultValue": "SUMMIT-SQL"
                    },
                    "Tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "FirstPull": {
                        "type": "Bool",
                        "defaultValue": true
                    },
                    "IsDeltaPullPipeline": {
                        "type": "Bool",
                        "defaultValue": false
                    },
                    "singleQuote": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "Instance_ID": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    },
                    "source_name": {
                        "type": "string"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "runId": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-10T10:56:57Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/summit_source')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]",
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/api-delta-pull-core-pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LookupOldWaterMarkActivity",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select WatermarkValue from table_injestion_monitor where Table_Name=  '@{pipeline().parameters.Table_name}' and Tenant='@{pipeline().parameters.Tenant}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": {
                                        "value": "@pipeline().parameters.sys_username",
                                        "type": "Expression"
                                    },
                                    "password": {
                                        "value": "@pipeline().parameters.sys_password",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "StoredProcedureToUpsert",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": {
                                "value": "@pipeline().parameters.StoredProcedureNameForUpsertOperation",
                                "type": "Expression"
                            },
                            "storedProcedureParameters": {
                                "temp_Table": {
                                    "value": {
                                        "value": "@pipeline().parameters.temp_table",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "destination_summit",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "MonitorActivity",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "StoredProcedureToUpsert",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[eu_fp_monitor_success]",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "LastModifiedtime": {
                                    "value": {
                                        "value": "@activity('LookupNewWaterMarkActivity').output.firstRow.OutputObject.SUBROOT[0].MaxDate",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "message": {
                                    "value": "API based Delta pull success",
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "SUCCESS",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "@pipeline().parameters.Table_name",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "username": "@pipeline().parameters.sys_username",
                                "password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Lookup1",
                        "description": "find total rows",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "LookupOldWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupNewWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "HttpSource",
                                "httpRequestTimeout": "00:01:40"
                            },
                            "dataset": {
                                "referenceName": "summit_api",
                                "type": "DatasetReference",
                                "parameters": {
                                    "PageIndex": 0,
                                    "TableName": {
                                        "value": "@pipeline().parameters.table_name",
                                        "type": "Expression"
                                    },
                                    "PageSize": 1,
                                    "FromDate": {
                                        "value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue",
                                        "type": "Expression"
                                    },
                                    "ToDate": {
                                        "value": "@activity('LookupNewWaterMarkActivity').output.firstRow.OutputObject.SUBROOT[0].MaxDate",
                                        "type": "Expression"
                                    },
                                    "IsMaxRequest": 0,
                                    "Tenant": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "Domain": {
                                        "value": "@pipeline().parameters.Domain",
                                        "type": "Expression"
                                    },
                                    "structure": {
                                        "value": "@pipeline().parameters.Structure",
                                        "type": "Expression"
                                    },
                                    "jsonPathDefinition": {
                                        "value": "@pipeline().parameters.SA_jsonPathExpression",
                                        "type": "Expression"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "ForEach1",
                        "description": "range(0, n)\nn is total pages, with some complicated formul",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Web1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(0, add(1,div(activity('Web1').output.total_rows , pipeline().parameters.PageSize)))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Copy1",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [
                                        {
                                            "name": "Destination",
                                            "value": "@{pipeline().parameters.temp_table}"
                                        }
                                    ],
                                    "typeProperties": {
                                        "source": {
                                            "type": "HttpSource",
                                            "httpRequestTimeout": "00:01:40"
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "writeBatchSize": 10000,
                                            "preCopyScript": {
                                                "value": "truncate table @{pipeline().parameters.temp_table}; ",
                                                "type": "Expression"
                                            }
                                        },
                                        "enableStaging": false,
                                        "dataIntegrationUnits": 0
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "summit_api",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "PageIndex": {
                                                    "value": "@item()",
                                                    "type": "Expression"
                                                },
                                                "TableName": {
                                                    "value": "@pipeline().parameters.Table_name",
                                                    "type": "Expression"
                                                },
                                                "PageSize": {
                                                    "value": "@pipeline().parameters.PageSize",
                                                    "type": "Expression"
                                                },
                                                "FromDate": {
                                                    "value": "@addseconds( activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue, 1)",
                                                    "type": "Expression"
                                                },
                                                "ToDate": " ",
                                                "IsMaxRequest": 0,
                                                "Tenant": {
                                                    "value": "@pipeline().parameters.Tenant",
                                                    "type": "Expression"
                                                },
                                                "Domain": {
                                                    "value": "@pipeline().parameters.Domain",
                                                    "type": "Expression"
                                                },
                                                "structure": {
                                                    "value": "@pipeline().parameters.Structure",
                                                    "type": "Expression"
                                                },
                                                "jsonPathDefinition": {
                                                    "value": "@pipeline().parameters.SA_jsonPathExpression",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "summit_sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SinkTableName": {
                                                    "value": "@pipeline().parameters.temp_table",
                                                    "type": "Expression"
                                                },
                                                "username": "@pipeline().parameters.sink_username",
                                                "password": {
                                                    "value": "@pipeline().parameters.sink_password",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP_ForFailure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[eu_fp_monitor_success]",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "LastModifiedtime": {
                                    "value": {
                                        "value": "@activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "message": {
                                    "value": {
                                        "value": "for each loop failed, that means, api returned null value, implying success   log\n @activity('Lookup1').output",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": "FAILURE",
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "@pipeline().parameters.Table_name",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "username": {
                                    "value": "@pipeline().parameters.sys_username",
                                    "type": "Expression"
                                },
                                "password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Web1",
                        "description": "parse total rows",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://lookuptotalrows.azurewebsites.net/api/HttpTriggerJS1?code=b4KlaeKmLem0KkPEvsZLxYZaNlSKpcDeLOjNnZGgAmxSB/Ld3TilAA==",
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{ \"data\": @{activity('Lookup1').output.firstRow} }",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "LookupNewWaterMarkActivity",
                        "description": "max request to api to find new watermark  activity. ",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "HttpSource",
                                "httpRequestTimeout": "00:01:40"
                            },
                            "dataset": {
                                "referenceName": "summit_api",
                                "type": "DatasetReference",
                                "parameters": {
                                    "PageIndex": 0,
                                    "TableName": {
                                        "value": "@pipeline().parameters.Table_name",
                                        "type": "Expression"
                                    },
                                    "PageSize": 100,
                                    "FromDate": " ",
                                    "ToDate": " ",
                                    "IsMaxRequest": 1,
                                    "Tenant": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "Domain": {
                                        "value": "@pipeline().parameters.Domain",
                                        "type": "Expression"
                                    },
                                    "structure": {
                                        "value": "@pipeline().parameters.Structure",
                                        "type": "Expression"
                                    },
                                    "jsonPathDefinition": {
                                        "value": "@pipeline().parameters.SA_jsonPathExpression",
                                        "type": "Expression"
                                    }
                                }
                            }
                        }
                    }
                ],
                "parameters": {
                    "Table_name": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "Tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "Domain": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "Structure": {
                        "type": "Object",
                        "defaultValue": [
                            {
                                "name": "SLA_ID",
                                "type": "Int64"
                            },
                            {
                                "name": "Org_Id",
                                "type": "Int64"
                            },
                            {
                                "name": "sup_function",
                                "type": "String"
                            },
                            {
                                "name": "SLA_Name",
                                "type": "String"
                            },
                            {
                                "name": "Active",
                                "type": "Boolean"
                            },
                            {
                                "name": "IsDefault",
                                "type": "Boolean"
                            },
                            {
                                "name": "Location",
                                "type": "Int64"
                            },
                            {
                                "name": "ExecutiveLocation",
                                "type": "Boolean"
                            },
                            {
                                "name": "UpdatedDateForAI",
                                "type": "String"
                            },
                            {
                                "name": "CustomerMatrix_MasterId",
                                "type": "int64"
                            },
                            {
                                "name": "guid",
                                "type": "string"
                            }
                        ]
                    },
                    "StoredProcedureNameForUpsertOperation": {
                        "type": "String",
                        "defaultValue": "eu_upsert_IM_SLA_Master"
                    },
                    "PageSize": {
                        "type": "Int",
                        "defaultValue": 10
                    },
                    "temp_table": {
                        "type": "String",
                        "defaultValue": "temp_IT_IM_SLA_Master"
                    },
                    "SINK_TABLE_NAME": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "TenantWiseSelectRows": {
                        "type": "String",
                        "defaultValue": "SELECT * FROM IM_SLA_Master a WITH (NOLOCK) where a.sup_function = "
                    },
                    "singleQuotes": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "WaterMark_Column": {
                        "type": "String",
                        "defaultValue": "UpdatedDateForAI"
                    },
                    "SA_jsonPathExpression": {
                        "type": "String",
                        "defaultValue": {
                            "Errors": "$.['Errors']",
                            "Message": "$.['Message']",
                            "Output": "$.['Output']",
                            "OrgID": "$.['OrgID']",
                            "OutputObject.SUBROOT": "$.['OutputObject']['SUBROOT']",
                            "ROWNUM": "[['ROWNUM']",
                            "TotalRows": "[['TotalRows']",
                            "SLA_ID": "[['SLA_ID']",
                            "Org_Id": "[['Org_Id']",
                            "sup_function": "[['sup_function']",
                            "SLA_Name": "[['SLA_Name']",
                            "Active": "[['Active']",
                            "IsDefault": "[['IsDefault']",
                            "Location": "[['Location']",
                            "ExecutiveLocation": "[['ExecutiveLocation']",
                            "UpdatedDateForAI": "[['UpdatedDateForAI']",
                            "TokenID": "[['TokenID']",
                            "guid": "[['guid']",
                            "CustomerMatrix_MasterId": "[['CustomerMatrix_MasterId']"
                        }
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:06Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/summit_api')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Copy_SQL_pipeline_others')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "FetchItemsToProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@Activity('FetchItemsToProcess').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "CopyActivity",
                                    "description": "Copy data from source table to sink db. ",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "LookupNewWaterMarkActivity",
                                            "dependencyConditions": [
                                                "Succeeded",
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [
                                        {
                                            "name": "Source",
                                            "value": "@{item().TABLE_NAME}"
                                        },
                                        {
                                            "name": "Destination",
                                            "value": "@{concat(item().SINK_TABLE_NAME, ' ')}"
                                        }
                                    ],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "@if(equals(pipeline().parameters.source_name,'source2'),replace(item().copyquery, '@tenant', pipeline().parameters.gc_tenant),replace(item().copyquery, '@tenant', pipeline().parameters.Tenant))",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "writeBatchSize": 10000
                                        },
                                        "enableStaging": false,
                                        "dataIntegrationUnits": 0
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "other_sources",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "table_name": "@item().TABLE_NAME",
                                                "server_name": "@activity('lookup_linked_service').output.firstRow.server_name",
                                                "database_name": "@activity('lookup_linked_service').output.firstRow.database_name",
                                                "username": "@activity('lookup_linked_service').output.firstRow.username",
                                                "password": "@activity('lookup_linked_service').output.firstRow.password"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "summit_sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "password": "@pipeline().parameters.sink_password",
                                                "username": "@pipeline().parameters.sink_username",
                                                "SinkTableName": "@{item().SINK_TABLE_NAME} "
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "MonitorActivity",
                                    "description": "Monitor the run of this activity. ",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "If Condition1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_fp_monitor_success",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "LastModifiedtime": {
                                                "value": {
                                                    "value": "@coalesce( activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue , adddays(utcnow(), -2) )",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "message": {
                                                "value": {
                                                    "value": "@concat( 'copy pipeline success' ,activity('CopyActivity').output)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().parameters.runId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "SUCCESS",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@item().TABLE_NAME",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.Tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@pipeline().parameters.sys_password",
                                            "username": "@pipeline().parameters.sys_username"
                                        }
                                    }
                                },
                                {
                                    "name": "LookupNewWaterMarkActivity",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "preCopyCleanUP",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "lookup_linked_service",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "@coalesce( if(equals(item().lookupnewwatermark,''),NULL,item().lookupnewwatermark), replace( replace( item().copyquery, '@tenant', pipeline().parameters.Tenant), 'a.*', concat( 'MAX(a.' , item().WaterMark_Column, ') as NewWatermarkvalue' ) ))",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "other_sources",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "table_name": "@item().TABLE_NAME",
                                                "server_name": "@activity('lookup_linked_service').output.firstRow.server_name",
                                                "database_name": "@activity('lookup_linked_service').output.firstRow.database_name",
                                                "username": "@activity('lookup_linked_service').output.firstRow.username",
                                                "password": "@activity('lookup_linked_service').output.firstRow.password"
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "preCopyCleanUP",
                                    "description": "delete relevant data from DW. for particular tenant",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_execute",
                                        "storedProcedureParameters": {
                                            "statement": {
                                                "value": {
                                                    "value": "@replace(coalesce(item().precopycleanup , concat( 'DELETE FROM ', item().SINK_TABLE_NAME, ' where ', item().primary_column, ' IN ( ', replace( replace( replace( item().copyquery,'*, ''@tenant''' , '*' ) , '@tenant', pipeline().parameters.Tenant) , '*', item().primary_column ), ' );' )),'@tenant', pipeline().parameters.Tenant)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "destination_summit",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@pipeline().parameters.sink_password",
                                            "username": "@pipeline().parameters.sink_username"
                                        }
                                    }
                                },
                                {
                                    "name": "FailureMonitor",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "CopyActivity",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_fp_monitor_failure",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('CopyActivity').output, activity('CopyActivity').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().parameters.runId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "FAILURE",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@item().TABLE_NAME",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.Tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@pipeline().parameters.sys_password",
                                            "username": "@pipeline().parameters.sys_username"
                                        }
                                    }
                                },
                                {
                                    "name": "lookup_linked_service",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlSource",
                                            "sqlReaderQuery": {
                                                "value": "select  JSON_VALUE(source_credentials_json, '$.server_name') as server_name, JSON_VALUE(source_credentials_json, '$.database_name') as database_name,JSON_VALUE(source_credentials_json, '$.username') as username, JSON_VALUE(source_credentials_json, '$.password') as password from source_master where instance_id='@{pipeline().parameters.Instance_ID}' and source_name = '@{pipeline().parameters.source_name}'",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "eureka_system_common",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    }
                                },
                                {
                                    "name": "If Condition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "CopyActivity",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(equals(pipeline().parameters.source_name,'source2'),contains(item().copyquery,'tenant'))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Stored procedure1",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_execute",
                                                    "storedProcedureParameters": {
                                                        "statement": {
                                                            "value": {
                                                                "value": "@concat( 'UPDATE ', item().SINK_TABLE_NAME, ' SET Tenant= ', pipeline().parameters.singleQuote,pipeline().parameters.Tenant,pipeline().parameters.singleQuote)",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "destination_summit",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": {
                                                            "value": "@pipeline().parameters.sink_password",
                                                            "type": "Expression"
                                                        },
                                                        "username": {
                                                            "value": "@pipeline().parameters.sink_username",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "FetchItemsToProcess",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "InitPipelineProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select a.table_name, a.watermark_column, a.uid_column as primary_column, \na.copyquery, a.table_name as sink_table_name, a.precopycleanup as precopycleanup, a.lookupnewwatermark as lookupnewwatermark\nfrom table_master a\nINNER JOIN table_injestion_monitor b  ON a.table_name = b.table_name  WHERE b.RUNID = '@{pipeline().RunId}' and b.source_name = '@{pipeline().parameters.source_name}' and a.SOR = '@{pipeline().parameters.SOR}' ;",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@pipeline().parameters.sys_username",
                                    "password": "@pipeline().parameters.sys_password"
                                }
                            },
                            "firstRowOnly": {
                                "value": "False",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "InitPipelineProcess",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_pull_init",
                            "storedProcedureParameters": {
                                "domain": {
                                    "value": {
                                        "value": "@pipeline().parameters.domain",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "FirstPull": {
                                    "value": {
                                        "value": "@pipeline().parameters.FirstPull",
                                        "type": "Expression"
                                    },
                                    "type": "Boolean"
                                },
                                "IsDeltaPullPipeline": {
                                    "value": {
                                        "value": "@pipeline().parameters.IsDeltaPullPipeline",
                                        "type": "Expression"
                                    },
                                    "type": "Boolean"
                                },
                                "RUNID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "SOR": {
                                    "value": {
                                        "value": "@pipeline().parameters.SOR",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "source_name": {
                                    "value": {
                                        "value": "@pipeline().parameters.source_name",
                                        "type": "Expression"
                                    }
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@pipeline().parameters.sys_password",
                                "username": "@pipeline().parameters.sys_username"
                            }
                        }
                    },
                    {
                        "name": "serviceBusNotification",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://eureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net/general/messages",
                            "method": "POST",
                            "headers": {
                                "Authorization": "SharedAccessSignature sr=http%3A%2F%2Feureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net%2F&sig=ojF8%2BSnw6RY2j7tsexRpkM3DSpZ2AbDEeE76J3mPf%2Bo%3D&se=1632212088&skn=Send",
                                "Content-Type": "application/json",
                                "component": "data_ingestion",
                                "event": "pipeline_completed"
                            },
                            "body": {
                                "value": "{ \"pipeline_name\": '@{pipeline().Pipeline}', \"tenant\" : '@{pipeline().parameters.Tenant}', \"domain\" : '@{pipeline().parameters.domain}', \"first_pull\" : '@{pipeline().parameters.FirstPull}'\n}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "domain": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "SOR": {
                        "type": "String",
                        "defaultValue": "SUMMIT-SQL"
                    },
                    "Tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "FirstPull": {
                        "type": "Bool",
                        "defaultValue": true
                    },
                    "IsDeltaPullPipeline": {
                        "type": "Bool",
                        "defaultValue": false
                    },
                    "singleQuote": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "Instance_ID": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    },
                    "source_name": {
                        "type": "string"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "runId": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-10T10:56:57Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/other_sources')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]",
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/API-copy-core-pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Api based copy pipeline",
                "activities": [
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Web1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "LookupNewWaterMarkActivity",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(0, add(1,div(activity('Web1').output.total_rows , pipeline().parameters.PageSize)))",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy1",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [
                                        {
                                            "name": "Destination",
                                            "value": "@{pipeline().parameters.SINK_TABLE_NAME}"
                                        },
                                        {
                                            "name": "sink_username",
                                            "value": "@pipeline().parameters.sink_username"
                                        },
                                        {
                                            "name": "sink_password",
                                            "value": "@pipeline().parameters.sink_username"
                                        }
                                    ],
                                    "typeProperties": {
                                        "source": {
                                            "type": "HttpSource",
                                            "httpRequestTimeout": "00:01:40"
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "writeBatchSize": 10000
                                        },
                                        "enableStaging": false,
                                        "dataIntegrationUnits": 0
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "summit_api",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "PageIndex": {
                                                    "value": "@item()",
                                                    "type": "Expression"
                                                },
                                                "TableName": {
                                                    "value": "@pipeline().parameters.tableName",
                                                    "type": "Expression"
                                                },
                                                "PageSize": {
                                                    "value": "@pipeline().parameters.PageSize",
                                                    "type": "Expression"
                                                },
                                                "FromDate": " ",
                                                "ToDate": " ",
                                                "IsMaxRequest": 0,
                                                "Tenant": {
                                                    "value": "@pipeline().parameters.TenantID",
                                                    "type": "Expression"
                                                },
                                                "Domain": {
                                                    "value": "@pipeline().parameters.Domain",
                                                    "type": "Expression"
                                                },
                                                "structure": {
                                                    "value": "@pipeline().parameters.structure",
                                                    "type": "Expression"
                                                },
                                                "jsonPathDefinition": {
                                                    "value": "@pipeline().parameters.jsonPathDefinition",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "summit_sink",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SinkTableName": {
                                                    "value": "@pipeline().parameters.SINK_TABLE_NAME",
                                                    "type": "Expression"
                                                },
                                                "username": "@pipeline().parameters.sink_username",
                                                "password": "@pipeline().parameters.sink_password"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "Lookup1",
                        "description": "lookup total rows",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "HttpSource",
                                "httpRequestTimeout": "00:01:40"
                            },
                            "dataset": {
                                "referenceName": "summit_api",
                                "type": "DatasetReference",
                                "parameters": {
                                    "PageIndex": 0,
                                    "TableName": {
                                        "value": "@pipeline().parameters.tableName",
                                        "type": "Expression"
                                    },
                                    "PageSize": 1,
                                    "FromDate": " ",
                                    "ToDate": " ",
                                    "IsMaxRequest": 0,
                                    "Tenant": {
                                        "value": "@pipeline().parameters.TenantID",
                                        "type": "Expression"
                                    },
                                    "Domain": {
                                        "value": "@pipeline().parameters.Domain",
                                        "type": "Expression"
                                    },
                                    "structure": {
                                        "value": "@pipeline().parameters.structure",
                                        "type": "Expression"
                                    },
                                    "jsonPathDefinition": {
                                        "value": "@pipeline().parameters.jsonPathDefinition",
                                        "type": "Expression"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "Stored Procedure1",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Lookup-final-rows-sink-table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[eu_fp_monitor_success]",
                            "storedProcedureParameters": {
                                "EndTime": {
                                    "value": {
                                        "value": "@utcnow()",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "LastModifiedtime": {
                                    "value": {
                                        "value": "@coalesce( activity('LookupNewWaterMarkActivity').output.firstRow.OUTPUTOBJECT.SUBROOT[0].maxDate , adddays(utcnow(), -2) )",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "message": {
                                    "value": {
                                        "value": "@concat( activity('Lookup-final-rows-sink-table').output, activity('LookupNewWaterMarkActivity').output, 'some message ')",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pipelineID": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "RunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "StartTime": {
                                    "value": {
                                        "value": "@pipeline().TriggerTime",
                                        "type": "Expression"
                                    },
                                    "type": "DateTime"
                                },
                                "Status": {
                                    "value": {
                                        "value": "@if( equals( activity('Web1').output.total_rows , activity('Lookup-final-rows-sink-table').output.firstRow.rowsSink ) ,'SUCCESS', 'FALSE-SUCCESS ' )",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TableName": {
                                    "value": {
                                        "value": "@pipeline().parameters.tableName",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.TenantID",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "TriggerCondition": {
                                    "value": {
                                        "value": "@pipeline().TriggerType",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "username": "@pipeline().parameters.sys_username",
                                "password": "@pipeline().parameters.sys_password"
                            }
                        }
                    },
                    {
                        "name": "Lookup-final-rows-sink-table",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "@replace(concat( pipeline().parameters.tenantWiseSelectQuery, pipeline().parameters.singleQuote, pipeline().parameters.tenantID, pipeline().parameters.singleQuote) ,\n'a.*', concat( 'MAX(a.' , pipeline().parameters.WaterMark_Column, ') as NewWatermarkvalue,  count(*) as rowsSink '))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "summit_sink",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SinkTableName": {
                                        "value": "@pipeline().parameters.tableName",
                                        "type": "Expression"
                                    },
                                    "username": {
                                        "value": "@pipeline().parameters.sink_username",
                                        "type": "Expression"
                                    },
                                    "password": {
                                        "value": "@pipeline().parameters.sink_password",
                                        "type": "Expression"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "Web1",
                        "description": "parse total rows for ForEach column",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://lookuptotalrows.azurewebsites.net/api/HttpTriggerJS1?code=b4KlaeKmLem0KkPEvsZLxYZaNlSKpcDeLOjNnZGgAmxSB/Ld3TilAA==",
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{ \"data\"  : @{activity('Lookup1').output.firstRow} }",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "LookupNewWaterMarkActivity",
                        "description": "lookup total rows",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "HttpSource",
                                "httpRequestTimeout": "00:01:40"
                            },
                            "dataset": {
                                "referenceName": "summit_api",
                                "type": "DatasetReference",
                                "parameters": {
                                    "PageIndex": 0,
                                    "TableName": {
                                        "value": "@pipeline().parameters.tableName",
                                        "type": "Expression"
                                    },
                                    "PageSize": 1,
                                    "FromDate": " ",
                                    "ToDate": " ",
                                    "IsMaxRequest": 1,
                                    "Tenant": {
                                        "value": "@pipeline().parameters.TenantID",
                                        "type": "Expression"
                                    },
                                    "Domain": {
                                        "value": "@pipeline().parameters.Domain",
                                        "type": "Expression"
                                    },
                                    "structure": {
                                        "value": "@pipeline().parameters.structure",
                                        "type": "Expression"
                                    },
                                    "jsonPathDefinition": {
                                        "value": "@pipeline().parameters.jsonPathDefinition",
                                        "type": "Expression"
                                    }
                                }
                            }
                        }
                    }
                ],
                "parameters": {
                    "tableName": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "TenantID": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "PageSize": {
                        "type": "Int",
                        "defaultValue": 1000
                    },
                    "Domain": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "structure": {
                        "type": "Object",
                        "defaultValue": [
                            {
                                "name": "SLA_ID",
                                "type": "Int32"
                            },
                            {
                                "name": "Org_Id",
                                "type": "Int32"
                            },
                            {
                                "name": "sup_function",
                                "type": "String"
                            },
                            {
                                "name": "SLA_Name",
                                "type": "String"
                            },
                            {
                                "name": "guid",
                                "type": "String"
                            },
                            {
                                "name": "Active",
                                "type": "Boolean"
                            },
                            {
                                "name": "IsDefault",
                                "type": "Boolean"
                            },
                            {
                                "name": "Location",
                                "type": "Int32"
                            },
                            {
                                "name": "ExecutiveLocation",
                                "type": "Boolean"
                            },
                            {
                                "name": "CustomerMatrix_MasterId",
                                "type": "Int32"
                            },
                            {
                                "name": "UpdatedDateForAI",
                                "type": "String"
                            }
                        ]
                    },
                    "jsonPathDefinition": {
                        "type": "Object",
                        "defaultValue": {
                            "Errors": "$.['Errors']",
                            "Message": "$.['Message']",
                            "Output": "$.['Output']",
                            "OrgID": "$.['OrgID']",
                            "OutputObject.SUBROOT": "$.['OutputObject']['SUBROOT']",
                            "ROWNUM": "[['ROWNUM']",
                            "TotalRows": "[['TotalRows']",
                            "SLA_ID": "[['SLA_ID']",
                            "Org_Id": "[['Org_Id']",
                            "sup_function": "[['sup_function']",
                            "SLA_Name": "[['SLA_Name']",
                            "Active": "[['Active']",
                            "IsDefault": "[['IsDefault']",
                            "Location": "[['Location']",
                            "ExecutiveLocation": "[['ExecutiveLocation']",
                            "UpdatedDateForAI": "[['UpdatedDateForAI']",
                            "TokenID": "[['TokenID']",
                            "guid": "[['guid']",
                            "CustomerMatrix_MasterId": "[['CustomerMatrix_MasterId']"
                        }
                    },
                    "SINK_TABLE_NAME": {
                        "type": "String",
                        "defaultValue": "IM_SLA_Master"
                    },
                    "WaterMark_Column": {
                        "type": "String",
                        "defaultValue": "UpdatedDateForAI"
                    },
                    "tenantWiseSelectQuery": {
                        "type": "String",
                        "defaultValue": "SELECT a.* FROM IM_SLA_Master a WITH (NOLOCK) where a.sup_function ="
                    },
                    "singleQuote": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:06Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/summit_api')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/summit_sink')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/delta_pull_SQL_pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "delta pull POC",
                "activities": [
                    {
                        "name": "iterateSQLTables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "fetchItemsToProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('fetchItemsToProcess').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Execute Pipeline1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "delta-pull-SQL-Core-pipeline",
                                            "type": "PipelineReference"
                                        },
                                        "parameters": {
                                            "TABLE_NAME": {
                                                "value": "@item().table_name",
                                                "type": "Expression"
                                            },
                                            "WaterMark_Column": {
                                                "value": "@item().WaterMark_Column",
                                                "type": "Expression"
                                            },
                                            "Tenant": {
                                                "value": "@pipeline().parameters.Tenant",
                                                "type": "Expression"
                                            },
                                            "upsertquery": {
                                                "value": "@item().upsertquery",
                                                "type": "Expression"
                                            },
                                            "temp_table": {
                                                "value": "@concat('temp_',item().table_name)",
                                                "type": "Expression"
                                            },
                                            "quote_single": "'",
                                            "SINK_TABLE_NAME": {
                                                "value": "@item().table_name",
                                                "type": "Expression"
                                            },
                                            "copyquery": {
                                                "value": "@item().copyquery",
                                                "type": "Expression"
                                            },
                                            "sink_username": {
                                                "value": "@pipeline().parameters.sink_username",
                                                "type": "Expression"
                                            },
                                            "sink_password": {
                                                "value": "@pipeline().parameters.sink_password",
                                                "type": "Expression"
                                            },
                                            "Instance_ID": {
                                                "value": "@pipeline().parameters.Instance_ID",
                                                "type": "Expression"
                                            },
                                            "sys_username": {
                                                "value": "@pipeline().parameters.sys_username",
                                                "type": "Expression"
                                            },
                                            "sys_password": {
                                                "value": "@pipeline().parameters.sys_password",
                                                "type": "Expression"
                                            },
                                            "lookupnewwatermark": {
                                                "value": "@item().lookupnewwatermark",
                                                "type": "Expression"
                                            },
                                            "tenant_column": {
                                                "value": "@item().tenant_column",
                                                "type": "Expression"
                                            },
                                            "source_name": {
                                                "value": "@pipeline().parameters.source_name",
                                                "type": "Expression"
                                            },
                                            "gc_tenant": {
                                                "value": "@pipeline().parameters.gc_tenant",
                                                "type": "Expression"
                                            },
                                            "runId": {
                                                "value": "@pipeline().parameters.runId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Stored Procedure1",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Pipeline1",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_fp_monitor_failure",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('Execute Pipeline1').output, activity('Execute Pipeline1').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "FAILURE",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@item().table_name",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.Tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@pipeline().parameters.sys_password",
                                            "username": "@pipeline().parameters.sys_username"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "fetchItemsToProcess",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "initPipelineProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select a.table_name, \na.watermark_column,a.tenant_column, a.isdeltaallowed, \na.copyquery,\na.upsertquery,\na.lookupnewwatermark as lookupnewwatermark\nfrom table_master a\nINNER JOIN table_injestion_monitor b  ON a.table_name = b.table_name \nWHERE b.RUNID = '@{pipeline().RunId}' and b.source_name = '@{pipeline().parameters.source_name}' and a.SOR = '@{pipeline().parameters.SOR}' ;",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@pipeline().parameters.sys_username",
                                    "password": "@pipeline().parameters.sys_password"
                                }
                            },
                            "firstRowOnly": {
                                "value": "False",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "initPipelineProcess",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_pull_init",
                            "storedProcedureParameters": {
                                "domain": {
                                    "value": {
                                        "value": "@pipeline().parameters.domain",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "FirstPull": {
                                    "value": "false",
                                    "type": "Boolean"
                                },
                                "IsDeltaPullPipeline": {
                                    "value": "true",
                                    "type": "Boolean"
                                },
                                "RUNID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "SOR": {
                                    "value": {
                                        "value": "@pipeline().parameters.SOR",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "source_name": {
                                    "value": {
                                        "value": "@pipeline().parameters.source_name",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@pipeline().parameters.sys_password",
                                "username": "@pipeline().parameters.sys_username"
                            }
                        }
                    },
                    {
                        "name": "serviceBusNotification",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "iterateSQLTables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Execute-full-copy",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://eureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net/general/messages",
                            "method": "POST",
                            "headers": {
                                "Authorization": "SharedAccessSignature sr=http%3A%2F%2Feureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net%2F&sig=ojF8%2BSnw6RY2j7tsexRpkM3DSpZ2AbDEeE76J3mPf%2Bo%3D&se=1632212088&skn=Send",
                                "Content-Type": "application/json",
                                "component": "data_ingestion",
                                "event": "pipeline_completed"
                            },
                            "body": {
                                "value": "{ \"pipeline_name\": '@{pipeline().Pipeline}' ,\n \"tenant\" : '@{pipeline().parameters.Tenant}' ,\n\"domain\" : '@{pipeline().parameters.domain}' ,\n\"first_pull\" : '@{pipeline().parameters.FirstPull}'\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Execute-full-copy",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Copy_SQL_pipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "domain": {
                                    "value": "@pipeline().parameters.domain",
                                    "type": "Expression"
                                },
                                "SOR": {
                                    "value": "@pipeline().parameters.SOR",
                                    "type": "Expression"
                                },
                                "Tenant": {
                                    "value": "@pipeline().parameters.Tenant",
                                    "type": "Expression"
                                },
                                "FirstPull": false,
                                "IsDeltaPullPipeline": false,
                                "singleQuote": "'",
                                "sink_username": {
                                    "value": "@pipeline().parameters.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@pipeline().parameters.sink_password",
                                    "type": "Expression"
                                },
                                "Instance_ID": {
                                    "value": "@pipeline().parameters.Instance_ID",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@pipeline().parameters.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                },
                                "source_name": {
                                    "value": "@pipeline().parameters.source_name",
                                    "type": "Expression"
                                },
                                "gc_tenant": {
                                    "value": "@pipeline().parameters.gc_tenant",
                                    "type": "Expression"
                                },
                                "runId": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "parameters": {
                    "domain": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "SOR": {
                        "type": "String",
                        "defaultValue": "SUMMIT-SQL"
                    },
                    "Tenant": {
                        "type": "String"
                    },
                    "FirstPull": {
                        "type": "Bool",
                        "defaultValue": false
                    },
                    "IsDeltaPullPipeline": {
                        "type": "Bool",
                        "defaultValue": true
                    },
                    "quote_single": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "Instance_ID": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    },
                    "source_name": {
                        "type": "string"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "runId": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:45:36Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/pipelines/Copy_SQL_pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/delta-pull-SQL-Core-pipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/tenant-SQL-copy-pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "getTenants",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select Tenant,source_name,SOR from Tenant_master where status = 'ACTIVE'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": {
                                        "value": "@pipeline().parameters.sys_username",
                                        "type": "Expression"
                                    },
                                    "password": {
                                        "value": "@pipeline().parameters.sys_password",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach1",
                        "description": "test description",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "getTenants",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('getTenants').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "source_lookup",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "select onpremise_df from source_master where source_name = '@{item().source_name}' and instance_id = '@{pipeline().parameters.Instance_ID}'",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "eureka_system_common",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "onpremise_condition",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "source_lookup",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(activity('source_lookup').output.firstRow.onpremise_df,'1')\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "OtherSourcesPipeline",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "Copy_SQL_pipeline_others",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "domain": " ",
                                                        "SOR": {
                                                            "value": "@item().SOR",
                                                            "type": "Expression"
                                                        },
                                                        "Tenant": {
                                                            "value": "@item().Tenant",
                                                            "type": "Expression"
                                                        },
                                                        "FirstPull": true,
                                                        "IsDeltaPullPipeline": false,
                                                        "sink_username": {
                                                            "value": "@pipeline().parameters.sink_username",
                                                            "type": "Expression"
                                                        },
                                                        "sink_password": {
                                                            "value": "@pipeline().parameters.sink_password",
                                                            "type": "Expression"
                                                        },
                                                        "Instance_ID": {
                                                            "value": "@pipeline().parameters.Instance_ID",
                                                            "type": "Expression"
                                                        },
                                                        "sys_username": {
                                                            "value": "@pipeline().parameters.sys_username",
                                                            "type": "Expression"
                                                        },
                                                        "sys_password": {
                                                            "value": "@pipeline().parameters.sys_password",
                                                            "type": "Expression"
                                                        },
                                                        "source_name": {
                                                            "value": "@item().source_name",
                                                            "type": "Expression"
                                                        },
                                                        "gc_tenant": {
                                                            "value": "@pipeline().parameters.gc_tenant",
                                                            "type": "Expression"
                                                        },
                                                        "runId": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "SqlServerStoredProcedure2",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "OtherSourcesPipeline",
                                                        "dependencyConditions": [
                                                            "Completed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_execute",
                                                    "storedProcedureParameters": {
                                                        "statement": {
                                                            "value": {
                                                                "value": "insert into eureka_log(content) values( '@{activity('OtherSourcesPipeline').output}')",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "eureka_system",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": "@pipeline().parameters.sys_password",
                                                        "username": "@pipeline().parameters.sys_username"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "SqlServerStoredProcedure4",
                                                "description": "to make sure final status of tables in pipeline is Success or Failure, ",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "SqlServerStoredProcedure2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_fp_monitor_closure",
                                                    "storedProcedureParameters": {
                                                        "failure_message": {
                                                            "value": {
                                                                "value": "@activity('OtherSourcesPipeline').output",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "RUNID": {
                                                            "value": {
                                                                "value": "@json(string(activity('OtherSourcesPipeline').output)).pipelineRunId",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "eureka_system",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": "@pipeline().parameters.sys_password",
                                                        "username": "@pipeline().parameters.sys_username"
                                                    }
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Onpremisepipeline",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "Copy_SQL_pipeline",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "domain": " ",
                                                        "SOR": {
                                                            "value": "@item().SOR",
                                                            "type": "Expression"
                                                        },
                                                        "Tenant": {
                                                            "value": "@item().Tenant",
                                                            "type": "Expression"
                                                        },
                                                        "FirstPull": true,
                                                        "IsDeltaPullPipeline": false,
                                                        "sink_username": {
                                                            "value": "@pipeline().parameters.sink_username",
                                                            "type": "Expression"
                                                        },
                                                        "sink_password": {
                                                            "value": "@pipeline().parameters.sink_password",
                                                            "type": "Expression"
                                                        },
                                                        "Instance_ID": {
                                                            "value": "@pipeline().parameters.Instance_ID",
                                                            "type": "Expression"
                                                        },
                                                        "sys_username": {
                                                            "value": "@pipeline().parameters.sys_username",
                                                            "type": "Expression"
                                                        },
                                                        "sys_password": {
                                                            "value": "@pipeline().parameters.sys_password",
                                                            "type": "Expression"
                                                        },
                                                        "source_name": {
                                                            "value": "@item().source_name",
                                                            "type": "Expression"
                                                        },
                                                        "gc_tenant": {
                                                            "value": "@pipeline().parameters.gc_tenant",
                                                            "type": "Expression"
                                                        },
                                                        "runId": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "SqlServerStoredProcedure1",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Onpremisepipeline",
                                                        "dependencyConditions": [
                                                            "Completed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_execute",
                                                    "storedProcedureParameters": {
                                                        "statement": {
                                                            "value": {
                                                                "value": "insert into eureka_log(content) values( '@{activity('Onpremisepipeline').output}')",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "eureka_system",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": "@pipeline().parameters.sys_password",
                                                        "username": "@pipeline().parameters.sys_username"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "SqlServerStoredProcedure3",
                                                "description": "to make sure final status of tables in pipeline is Success or Failure, ",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "SqlServerStoredProcedure1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_fp_monitor_closure",
                                                    "storedProcedureParameters": {
                                                        "failure_message": {
                                                            "value": {
                                                                "value": "@activity('Onpremisepipeline').output",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "RUNID": {
                                                            "value": {
                                                                "value": "@json(string(activity('Onpremisepipeline').output)).pipelineRunId",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "eureka_system",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": "@pipeline().parameters.sys_password",
                                                        "username": "@pipeline().parameters.sys_username"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Lookup1",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Lookup2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@replace(variables('runQuery'),'@RunID',pipeline().RunId)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": {
                                        "value": "@pipeline().parameters.sys_username",
                                        "type": "Expression"
                                    },
                                    "password": {
                                        "value": "@pipeline().parameters.sys_password",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@string(activity('Lookup2').output.firstRow.url)",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\"Key\":@{variables('emailBody')},\"to_email\":\"@{string(activity('Lookup2').output.firstRow.to_email)}\",\"from_email\":\"@{string(activity('Lookup2').output.firstRow.from_email)}\",\"instanceId\":\"@{pipeline().parameters.Instance_ID}\",\"gcTenantId\":\"@{pipeline().parameters.gc_tenant}\"}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "emailBody",
                            "value": {
                                "value": "@string(activity('Lookup1').output.firstRow)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Lookup2",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('select url,to_email,from_email from function_urls where function_name=',variables('single_quote'),'func-di-emailNotification',variables('single_quote'),' and env=',variables('single_quote'),pipeline().parameters.environment,variables('single_quote'))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    }
                },
                "variables": {
                    "emailBody": {
                        "type": "String"
                    },
                    "to_email": {
                        "type": "String",
                        "defaultValue": "rushik.shah@nitorinfotech.com"
                    },
                    "from_email": {
                        "type": "String",
                        "defaultValue": "rushik.shah@symphonysummit.com"
                    },
                    "single_quote": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "runQuery": {
                        "type": "String",
                        "defaultValue": "declare @val varchar(max) = ''; select @val = COALESCE(@val,'') + '<tr ' + case when JSON_VALUE(jsonVal,'$.rowsRead') > JSON_VALUE(jsonVal, '$.rowsCopied') then ' style=color:red' else '' end + ' ><td>'+table_name+'</td><td class=centerAlign>'+tenant+'</td><td class=centerAlign>'+ source_name+'</td><td class=centerAlign>'+JSON_VALUE(jsonVal,'$.rowsRead')+'</td><td class=centerAlign>'+JSON_VALUE(jsonVal, '$.rowsCopied')+'</td><td class=centerAlign>'+JSON_VALUE(jsonVal, '$.copyDuration')+'</td><td class=centerAlign>'+status+'</td></tr>' from (select table_name,tenant,status,case source_name when 'source1' then 'SUMMIT-SQL' when 'source2' then 'GOLDEN-CATALOG' when 'source3' then 'CINDE-SQL' end as source_name,replace(replace(replace([message],'copy pipeline',''),'Success',''),'Error','') as jsonVal from table_injestion_monitor where RunID='@RunID' ) t; select '<html><style> .centerAlign { text-align: center; } tr:nth-child(even) {  background-color: #eee;}table tr:nth-child(odd) {  background-color: #fff;}table th {  color: white;  background-color: CornflowerBlue;  font-family: Arial, Helvetica, sans-serif;}table {  width: 70%}</style><h3>Below are the stats of Data Integration Pipeline Run Activity:</h3><br/><table><tr><th>TableName</th><th>TenantName</th><th>SourceName</th><th>RowsRead from source</th><th>RowsCopied to Target</th><th>CopyDuration (sec)</th><th>Status</th></tr>' + @val + '</table><p>Note: Please do not reply to this email.</p></html>'"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-27T06:08:18Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/pipelines/Copy_SQL_pipeline_others')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/pipelines/Copy_SQL_pipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/delta_pull_SQL_pipeline_others')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "delta pull POC",
                "activities": [
                    {
                        "name": "iterateSQLTables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "fetchItemsToProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('fetchItemsToProcess').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Execute Pipeline1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "delta-pull-SQL-Core-pipeline-others",
                                            "type": "PipelineReference"
                                        },
                                        "parameters": {
                                            "TABLE_NAME": {
                                                "value": "@item().table_name",
                                                "type": "Expression"
                                            },
                                            "WaterMark_Column": {
                                                "value": "@item().WaterMark_Column",
                                                "type": "Expression"
                                            },
                                            "Tenant": {
                                                "value": "@pipeline().parameters.Tenant",
                                                "type": "Expression"
                                            },
                                            "upsertquery": {
                                                "value": "@item().upsertquery",
                                                "type": "Expression"
                                            },
                                            "temp_table": {
                                                "value": "@concat('temp_',item().table_name)",
                                                "type": "Expression"
                                            },
                                            "quote_single": "'",
                                            "SINK_TABLE_NAME": {
                                                "value": "@item().table_name",
                                                "type": "Expression"
                                            },
                                            "copyquery": {
                                                "value": "@item().copyquery",
                                                "type": "Expression"
                                            },
                                            "sink_username": {
                                                "value": "@pipeline().parameters.sink_username",
                                                "type": "Expression"
                                            },
                                            "sink_password": {
                                                "value": "@pipeline().parameters.sink_password",
                                                "type": "Expression"
                                            },
                                            "Instance_ID": {
                                                "value": "@pipeline().parameters.Instance_ID",
                                                "type": "Expression"
                                            },
                                            "sys_username": {
                                                "value": "@pipeline().parameters.sys_username",
                                                "type": "Expression"
                                            },
                                            "sys_password": {
                                                "value": "@pipeline().parameters.sys_password",
                                                "type": "Expression"
                                            },
                                            "lookupnewwatermark": {
                                                "value": "@item().lookupnewwatermark",
                                                "type": "Expression"
                                            },
                                            "tenant_column": {
                                                "value": "@item().tenant_column",
                                                "type": "Expression"
                                            },
                                            "source_name": {
                                                "value": "@pipeline().parameters.source_name",
                                                "type": "Expression"
                                            },
                                            "gc_tenant": {
                                                "value": "@pipeline().parameters.gc_tenant",
                                                "type": "Expression"
                                            },
                                            "runId": {
                                                "value": "@pipeline().parameters.runId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Stored Procedure1",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Pipeline1",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "eu_fp_monitor_failure",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('Execute Pipeline1').output, activity('Execute Pipeline1').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "FAILURE",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@item().table_name",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.Tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@pipeline().parameters.sys_password",
                                            "username": "@pipeline().parameters.sys_username"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "fetchItemsToProcess",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "initPipelineProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select a.table_name, \na.watermark_column,a.tenant_column, a.isdeltaallowed, \na.copyquery,\na.upsertquery,\na.lookupnewwatermark as lookupnewwatermark\nfrom table_master a\nINNER JOIN table_injestion_monitor b  ON a.table_name = b.table_name \nWHERE b.RUNID = '@{pipeline().RunId}' and b.source_name = '@{pipeline().parameters.source_name}' and a.SOR = '@{pipeline().parameters.SOR}' ;",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@pipeline().parameters.sys_username",
                                    "password": "@pipeline().parameters.sys_password"
                                }
                            },
                            "firstRowOnly": {
                                "value": "False",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "initPipelineProcess",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "eu_pull_init",
                            "storedProcedureParameters": {
                                "domain": {
                                    "value": {
                                        "value": "@pipeline().parameters.domain",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "FirstPull": {
                                    "value": "false",
                                    "type": "Boolean"
                                },
                                "IsDeltaPullPipeline": {
                                    "value": "true",
                                    "type": "Boolean"
                                },
                                "RUNID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "SOR": {
                                    "value": {
                                        "value": "@pipeline().parameters.SOR",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "source_name": {
                                    "value": {
                                        "value": "@pipeline().parameters.source_name",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "password": "@pipeline().parameters.sys_password",
                                "username": "@pipeline().parameters.sys_username"
                            }
                        }
                    },
                    {
                        "name": "serviceBusNotification",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "iterateSQLTables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Execute-full-copy",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://eureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net/general/messages",
                            "method": "POST",
                            "headers": {
                                "Authorization": "SharedAccessSignature sr=http%3A%2F%2Feureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net%2F&sig=ojF8%2BSnw6RY2j7tsexRpkM3DSpZ2AbDEeE76J3mPf%2Bo%3D&se=1632212088&skn=Send",
                                "Content-Type": "application/json",
                                "component": "data_ingestion",
                                "event": "pipeline_completed"
                            },
                            "body": {
                                "value": "{ \"pipeline_name\": '@{pipeline().Pipeline}' ,\n \"tenant\" : '@{pipeline().parameters.Tenant}' ,\n\"domain\" : '@{pipeline().parameters.domain}' ,\n\"first_pull\" : '@{pipeline().parameters.FirstPull}'\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Execute-full-copy",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Copy_SQL_pipeline_others",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "domain": {
                                    "value": "@pipeline().parameters.domain",
                                    "type": "Expression"
                                },
                                "SOR": {
                                    "value": "@pipeline().parameters.SOR",
                                    "type": "Expression"
                                },
                                "Tenant": {
                                    "value": "@pipeline().parameters.Tenant",
                                    "type": "Expression"
                                },
                                "FirstPull": false,
                                "IsDeltaPullPipeline": false,
                                "singleQuote": "'",
                                "sink_username": {
                                    "value": "@pipeline().parameters.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@pipeline().parameters.sink_password",
                                    "type": "Expression"
                                },
                                "Instance_ID": {
                                    "value": "@pipeline().parameters.Instance_ID",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@pipeline().parameters.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                },
                                "source_name": {
                                    "value": "@pipeline().parameters.source_name",
                                    "type": "Expression"
                                },
                                "gc_tenant": {
                                    "value": "@pipeline().parameters.gc_tenant",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "parameters": {
                    "domain": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "SOR": {
                        "type": "String",
                        "defaultValue": "SUMMIT-SQL"
                    },
                    "Tenant": {
                        "type": "String"
                    },
                    "FirstPull": {
                        "type": "Bool",
                        "defaultValue": false
                    },
                    "IsDeltaPullPipeline": {
                        "type": "Bool",
                        "defaultValue": true
                    },
                    "quote_single": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "Instance_ID": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    },
                    "source_name": {
                        "type": "string"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "runId": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:45:36Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/pipelines/Copy_SQL_pipeline_others')]",
                "[concat(variables('factoryId'), '/pipelines/delta-pull-SQL-Core-pipeline-others')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/API-copy-pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IterateOverTables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "FetchItemsToProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@Activity('FetchItemsToProcess').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Execute Pipeline1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "PreCopyCleanUP",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "API-copy-core-pipeline",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "tableName": {
                                                "value": "@{item().TABLE_NAME}",
                                                "type": "Expression"
                                            },
                                            "TenantID": {
                                                "value": "@pipeline().parameters.tenant",
                                                "type": "Expression"
                                            },
                                            "PageSize": {
                                                "value": "@int('100')",
                                                "type": "Expression"
                                            },
                                            "Domain": {
                                                "value": "@pipeline().parameters.domain",
                                                "type": "Expression"
                                            },
                                            "structure": {
                                                "value": "@json( item().structure)",
                                                "type": "Expression"
                                            },
                                            "jsonPathDefinition": {
                                                "value": "@json(item().jsonPathDefinition)",
                                                "type": "Expression"
                                            },
                                            "SINK_TABLE_NAME": {
                                                "value": "@item().SINK_TABLE_NAME",
                                                "type": "Expression"
                                            },
                                            "WaterMark_Column": {
                                                "value": "@item().WaterMark_Column ",
                                                "type": "Expression"
                                            },
                                            "tenantWiseSelectQuery": {
                                                "value": "@item().selectquerytenant",
                                                "type": "Expression"
                                            },
                                            "singleQuote": "'",
                                            "sink_username": {
                                                "value": "@pipeline().parameters.sink_username",
                                                "type": "Expression"
                                            },
                                            "sink_password": {
                                                "value": "@pipeline().parameters.sink_password",
                                                "type": "Expression"
                                            },
                                            "sys_username": {
                                                "value": "@pipeline().parameters.sys_username",
                                                "type": "Expression"
                                            },
                                            "sys_password": {
                                                "value": "@pipeline().parameters.sys_password",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "FailureMonitor",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Pipeline1",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[eu_fp_monitor_failure]",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('Execute Pipeline1').output, activity('Execute Pipeline1').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "FAILURE",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@{item().TABLE_NAME} ",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "username": "@pipeline().parameters.sys_username",
                                            "password": "@pipeline().parameters.sys_password"
                                        }
                                    }
                                },
                                {
                                    "name": "PreCopyCleanUP",
                                    "description": "delete previous data ",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[eu_execute]",
                                        "storedProcedureParameters": {
                                            "statement": {
                                                "value": {
                                                    "value": "@concat( 'DELETE FROM ', item().SINK_TABLE_NAME, ' where ', item().primary_column, ' IN ( ', replace( concat( item().SelectQueryTenant, pipeline().parameters.singleQuote, pipeline().parameters.tenant, pipeline().parameters.singleQuote) , '*', item().primary_column ), ' );' )",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "destination_summit",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "Stored Procedure1",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "PreCopyCleanUP",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[eu_fp_monitor_failure]",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('PreCopyCleanUP').output, activity('PreCopyCleanUP').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "FAILURE",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@{item().TABLE_NAME} ",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "username": "@pipeline().parameters.sys_username",
                                            "password": "@pipeline().parameters.sys_password"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "InitPipelineProcess",
                        "description": "mark table-monitor with runID",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[eu_pull_init]",
                            "storedProcedureParameters": {
                                "domain": {
                                    "value": {
                                        "value": "@pipeline().parameters.domain",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "FirstPull": {
                                    "value": {
                                        "value": "@pipeline().parameters.FirstPull",
                                        "type": "Expression"
                                    },
                                    "type": "Boolean"
                                },
                                "IsDeltaPullPipeline": {
                                    "value": {
                                        "value": "@pipeline().parameters.IsDeltaPullPipeline",
                                        "type": "Expression"
                                    },
                                    "type": "Boolean"
                                },
                                "RUNID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "SOR": {
                                    "value": "SUMMIT-API",
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "username": "@pipeline().parameters.sys_username",
                                "password": "@pipeline().parameters.sys_password"
                            }
                        }
                    },
                    {
                        "name": "FetchItemsToProcess",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "InitPipelineProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select a.table_name, a.watermark_column, \na.SA_Structure as structure, a.SA_jsonPathExpression as jsonPathDefinition,  a.SelectQueryTenant, \na.uid_column as primary_column, \nc.SINK_TABLE_NAME\nfrom table_master a\nINNER JOIN table_injestion_monitor b  ON a.table_name = b.table_name \nINNER JOIN table_tenant_mapping_variables c ON  c.tenant = b.tenant AND c.table_name = b.table_name\nWHERE b.RUNID = '@{pipeline().RunId}';",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@pipeline().parameters.sys_username",
                                    "password": "@pipeline().parameters.sys_password"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "serviceBusNotification",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "IterateOverTables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://eureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net/general/messages",
                            "method": "POST",
                            "headers": {
                                "Authorization": "SharedAccessSignature sr=http%3A%2F%2Feureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net%2F&sig=ojF8%2BSnw6RY2j7tsexRpkM3DSpZ2AbDEeE76J3mPf%2Bo%3D&se=1632212088&skn=Send",
                                "Content-Type": "application/json",
                                "component": "data_ingestion",
                                "event": "pipeline_completed"
                            },
                            "body": {
                                "value": "{ \"pipeline_name\": '@{pipeline().Pipeline}' ,\n \"tenant\" : '@{pipeline().parameters.Tenant}' ,\n\"domain\" : '@{pipeline().parameters.domain}' ,\n\"first_pull\" : '@{pipeline().parameters.FirstPull}'\n}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "tenant": {
                        "type": "String",
                        "defaultValue": "IT"
                    },
                    "domain": {
                        "type": "String",
                        "defaultValue": " "
                    },
                    "singleQuote": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "FirstPull": {
                        "type": "String"
                    },
                    "IsDeltaPullPipeline": {
                        "type": "String",
                        "defaultValue": "false"
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/pipelines/API-copy-core-pipeline')]",
                "[concat(variables('factoryId'), '/linkedServices/destination_summit')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/instance_sql_firstpull')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "InstanceLookup",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select sink_username, sink_password, sys_username, sys_password from instance_master where instance_id = '@{pipeline().parameters.Instance_ID}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "ExecuteTenantPipeline",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "tenant-SQL-copy-pipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Instance_ID": {
                                    "value": "@pipeline().parameters.Instance_ID",
                                    "type": "Expression"
                                },
                                "sink_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                    "type": "Expression"
                                },
                                "gc_tenant": {
                                    "value": "@pipeline().parameters.gc_tenant",
                                    "type": "Expression"
                                },
                                "environment": {
                                    "value": "@pipeline().parameters.environment",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "copy_csv_data",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "instance_id": {
                                    "value": "@pipeline().parameters.Instance_ID",
                                    "type": "Expression"
                                },
                                "folder_name": {
                                    "value": "@pipeline().parameters.faq_folder",
                                    "type": "Expression"
                                },
                                "sink_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    },
                    "faq_folder": {
                        "type": "string",
                        "defaultValue": "faq"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:24:42Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/pipelines/tenant-SQL-copy-pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/copy_csv_data')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/instance_sql_firstpull_DW')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "InstanceLookup",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select sink_username, sink_password, sys_username, sys_password from instance_master where instance_id = '@{pipeline().parameters.Instance_ID}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "ExecuteTenantPipeline",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Resume_Warehouse",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "tenant-SQL-copy-pipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Instance_ID": {
                                    "value": "@pipeline().parameters.Instance_ID",
                                    "type": "Expression"
                                },
                                "sink_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                    "type": "Expression"
                                },
                                "gc_tenant": {
                                    "value": "@pipeline().parameters.gc_tenant",
                                    "type": "Expression"
                                },
                                "environment": {
                                    "value": "@pipeline().parameters.environment",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Resume_Warehouse",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "copy_csv_data",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "instance_id": {
                                    "value": "@pipeline().parameters.Instance_ID",
                                    "type": "Expression"
                                },
                                "folder_name": {
                                    "value": "@pipeline().parameters.faq_folder",
                                    "type": "Expression"
                                },
                                "sink_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Resume_Warehouse",
                        "type": "Custom",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": "python3 operate_warehouse.py resume",
                            "resourceLinkedService": {
                                "referenceName": "AzureBlobStorage1",
                                "type": "LinkedServiceReference"
                            },
                            "folderPath": "wh-control",
                            "referenceObjects": {
                                "linkedServices": [],
                                "datasets": []
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureBatch1",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Pause_Warehouse",
                        "type": "Custom",
                        "dependsOn": [
                            {
                                "activity": "Execute Pipeline1",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "ExecuteTenantPipeline",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": "python3 operate_warehouse.py @{pipeline().parameters.warehouse_end_state}",
                                "type": "Expression"
                            },
                            "resourceLinkedService": {
                                "referenceName": "AzureBlobStorage1",
                                "type": "LinkedServiceReference"
                            },
                            "folderPath": "wh-control",
                            "referenceObjects": {
                                "linkedServices": [],
                                "datasets": []
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureBatch1",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    },
                    "warehouse_end_state": {
                        "type": "string",
                        "defaultValue": "pause"
                    },
                    "faq_folder": {
                        "type": "string",
                        "defaultValue": "faq"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:24:42Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/pipelines/tenant-SQL-copy-pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/copy_csv_data')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBatch1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/tenant-SQL-delta-pull-pipeline_DW')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "getTenants",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Resume_Warehouse",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select Tenant,source_name,SOR from Tenant_master where status = 'ACTIVE'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "password": "@activity('InstanceLookup').output.firstRow.sys_password"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "getTenants",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('getTenants').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "source_lookup",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "select onpremise_df from source_master where source_name = '@{item().source_name}' and instance_id = '@{pipeline().parameters.Instance_ID}'",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "eureka_system_common",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "IfCondition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "source_lookup",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(activity('source_lookup').output.firstRow.onpremise_df,'1')\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "ExecutePipeline4",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "delta_pull_SQL_pipeline_others",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "domain": " ",
                                                        "SOR": {
                                                            "value": "@item().SOR",
                                                            "type": "Expression"
                                                        },
                                                        "Tenant": {
                                                            "value": "@item().tenant",
                                                            "type": "Expression"
                                                        },
                                                        "FirstPull": false,
                                                        "IsDeltaPullPipeline": true,
                                                        "quote_single": "'",
                                                        "sink_username": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                                            "type": "Expression"
                                                        },
                                                        "sink_password": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                                            "type": "Expression"
                                                        },
                                                        "Instance_ID": {
                                                            "value": "@pipeline().parameters.Instance_ID",
                                                            "type": "Expression"
                                                        },
                                                        "sys_username": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                                            "type": "Expression"
                                                        },
                                                        "sys_password": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                            "type": "Expression"
                                                        },
                                                        "source_name": {
                                                            "value": "@item().source_name",
                                                            "type": "Expression"
                                                        },
                                                        "runId": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "SqlServerStoredProcedure6",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "ExecutePipeline4",
                                                        "dependencyConditions": [
                                                            "Completed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_fp_monitor_closure",
                                                    "storedProcedureParameters": {
                                                        "failure_message": {
                                                            "value": {
                                                                "value": "@activity('ExecutePipeline4').output",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "RUNID": {
                                                            "value": {
                                                                "value": "@json(string(activity('ExecutePipeline4').output)).pipelineRunId",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "eureka_system",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                        "username": "@activity('InstanceLookup').output.firstRow.sys_username"
                                                    }
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "ExecutePipeline3",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "delta_pull_SQL_pipeline",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "domain": " ",
                                                        "SOR": {
                                                            "value": "@item().SOR",
                                                            "type": "Expression"
                                                        },
                                                        "Tenant": {
                                                            "value": "@item().tenant",
                                                            "type": "Expression"
                                                        },
                                                        "FirstPull": false,
                                                        "IsDeltaPullPipeline": true,
                                                        "quote_single": "'",
                                                        "sink_username": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                                            "type": "Expression"
                                                        },
                                                        "sink_password": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                                            "type": "Expression"
                                                        },
                                                        "Instance_ID": {
                                                            "value": "@pipeline().parameters.Instance_ID",
                                                            "type": "Expression"
                                                        },
                                                        "sys_username": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                                            "type": "Expression"
                                                        },
                                                        "sys_password": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                            "type": "Expression"
                                                        },
                                                        "source_name": {
                                                            "value": "@item().source_name",
                                                            "type": "Expression"
                                                        },
                                                        "runId": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "SqlServerStoredProcedure5",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "ExecutePipeline3",
                                                        "dependencyConditions": [
                                                            "Completed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_fp_monitor_closure",
                                                    "storedProcedureParameters": {
                                                        "failure_message": {
                                                            "value": {
                                                                "value": "@activity('ExecutePipeline3').output",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "RUNID": {
                                                            "value": {
                                                                "value": "@json(string(activity('ExecutePipeline3').output)).pipelineRunId",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "eureka_system",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                        "username": "@activity('InstanceLookup').output.firstRow.sys_username"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "InstanceLookup",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select sink_username, sink_password, sys_username, sys_password from instance_master where instance_id = '@{pipeline().parameters.Instance_ID}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "Resume_Warehouse",
                        "type": "Custom",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": "python3 operate_warehouse.py resume",
                            "resourceLinkedService": {
                                "referenceName": "AzureBlobStorage1",
                                "type": "LinkedServiceReference"
                            },
                            "folderPath": "wh-control",
                            "referenceObjects": {
                                "linkedServices": [],
                                "datasets": []
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureBatch1",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Pause_Warehouse",
                        "type": "Custom",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "command": {
                                "value": "python3 operate_warehouse.py @{pipeline().parameters.warehouse_end_state}",
                                "type": "Expression"
                            },
                            "resourceLinkedService": {
                                "referenceName": "AzureBlobStorage1",
                                "type": "LinkedServiceReference"
                            },
                            "folderPath": "wh-control",
                            "referenceObjects": {
                                "linkedServices": [],
                                "datasets": []
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureBatch1",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Resume_Warehouse",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "copy_csv_data",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "instance_id": {
                                    "value": "@pipeline().parameters.Instance_ID",
                                    "type": "Expression"
                                },
                                "folder_name": {
                                    "value": "@pipeline().parameters.faq_folder",
                                    "type": "Expression"
                                },
                                "sink_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    },
                    "warehouse_end_state": {
                        "type": "string",
                        "defaultValue": "pause"
                    },
                    "faq_folder": {
                        "type": "string",
                        "defaultValue": "faq"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:45:37Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBatch1')]",
                "[concat(variables('factoryId'), '/pipelines/copy_csv_data')]",
                "[concat(variables('factoryId'), '/pipelines/delta_pull_SQL_pipeline_others')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/pipelines/delta_pull_SQL_pipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/tenant-SQL-delta-pull-pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "getTenants",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select Tenant,source_name,SOR from Tenant_master where status = 'ACTIVE'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "password": "@activity('InstanceLookup').output.firstRow.sys_password"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "getTenants",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('getTenants').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "source_lookup",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "select onpremise_df from source_master where source_name = '@{item().source_name}' and instance_id = '@{pipeline().parameters.Instance_ID}'",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "eureka_system_common",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "IfCondition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "source_lookup",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(activity('source_lookup').output.firstRow.onpremise_df,'1')\n",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "ExecutePipeline4",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "delta_pull_SQL_pipeline_others",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "domain": " ",
                                                        "SOR": {
                                                            "value": "@item().SOR",
                                                            "type": "Expression"
                                                        },
                                                        "Tenant": {
                                                            "value": "@item().tenant",
                                                            "type": "Expression"
                                                        },
                                                        "FirstPull": false,
                                                        "IsDeltaPullPipeline": true,
                                                        "quote_single": "'",
                                                        "sink_username": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                                            "type": "Expression"
                                                        },
                                                        "sink_password": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                                            "type": "Expression"
                                                        },
                                                        "Instance_ID": {
                                                            "value": "@pipeline().parameters.Instance_ID",
                                                            "type": "Expression"
                                                        },
                                                        "sys_username": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                                            "type": "Expression"
                                                        },
                                                        "sys_password": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                            "type": "Expression"
                                                        },
                                                        "source_name": {
                                                            "value": "@item().source_name",
                                                            "type": "Expression"
                                                        },
                                                        "gc_tenant": {
                                                            "value": "@pipeline().parameters.gc_tenant",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "SqlServerStoredProcedure6",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "ExecutePipeline4",
                                                        "dependencyConditions": [
                                                            "Completed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_fp_monitor_closure",
                                                    "storedProcedureParameters": {
                                                        "failure_message": {
                                                            "value": {
                                                                "value": "@activity('ExecutePipeline4').output",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "RUNID": {
                                                            "value": {
                                                                "value": "@json(string(activity('ExecutePipeline4').output)).pipelineRunId",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "eureka_system",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                        "username": "@activity('InstanceLookup').output.firstRow.sys_username"
                                                    }
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "ExecutePipeline3",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "delta_pull_SQL_pipeline",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "domain": " ",
                                                        "SOR": {
                                                            "value": "@item().SOR",
                                                            "type": "Expression"
                                                        },
                                                        "Tenant": {
                                                            "value": "@item().tenant",
                                                            "type": "Expression"
                                                        },
                                                        "FirstPull": false,
                                                        "IsDeltaPullPipeline": true,
                                                        "quote_single": "'",
                                                        "sink_username": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                                            "type": "Expression"
                                                        },
                                                        "sink_password": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                                            "type": "Expression"
                                                        },
                                                        "Instance_ID": {
                                                            "value": "@pipeline().parameters.Instance_ID",
                                                            "type": "Expression"
                                                        },
                                                        "sys_username": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                                            "type": "Expression"
                                                        },
                                                        "sys_password": {
                                                            "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                            "type": "Expression"
                                                        },
                                                        "source_name": {
                                                            "value": "@item().source_name",
                                                            "type": "Expression"
                                                        },
                                                        "gc_tenant": {
                                                            "value": "@pipeline().parameters.gc_tenant",
                                                            "type": "Expression"
                                                        },
                                                        "runId": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "SqlServerStoredProcedure5",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "ExecutePipeline3",
                                                        "dependencyConditions": [
                                                            "Completed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "eu_fp_monitor_closure",
                                                    "storedProcedureParameters": {
                                                        "failure_message": {
                                                            "value": {
                                                                "value": "@activity('ExecutePipeline3').output",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "RUNID": {
                                                            "value": {
                                                                "value": "@json(string(activity('ExecutePipeline3').output)).pipelineRunId",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "eureka_system",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "password": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                        "username": "@activity('InstanceLookup').output.firstRow.sys_username"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "InstanceLookup",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select sink_username, sink_password, sys_username, sys_password from instance_master where instance_id = '@{pipeline().parameters.Instance_ID}'",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "copy_csv_data",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "instance_id": {
                                    "value": "@pipeline().parameters.Instance_ID",
                                    "type": "Expression"
                                },
                                "folder_name": {
                                    "value": "@pipeline().parameters.faq_folder",
                                    "type": "Expression"
                                },
                                "sink_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Lookup1",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Lookup2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@replace(variables('runQuery'),'@RunID',pipeline().RunId)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@activity('InstanceLookup').output.firstRow.sys_username",
                                    "password": "@activity('InstanceLookup').output.firstRow.sys_password"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "emailBody",
                            "value": {
                                "value": "@string(activity('Lookup1').output.firstRow)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@string(activity('Lookup2').output.firstRow.url)",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\"Key\":@{variables('emailBody')},\"to_email\":\"@{string(activity('Lookup2').output.firstRow.to_email)}\",\"from_email\":\"@{string(activity('Lookup2').output.firstRow.from_email)}\",\"instanceId\":\"@{pipeline().parameters.Instance_ID}\",\"gcTenantId\":\"@{pipeline().parameters.gc_tenant}\"}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Lookup2",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('select url,to_email,from_email from function_urls where function_name=',variables('single_quote'),'func-di-emailNotification',variables('single_quote'),' and env=',variables('single_quote'),pipeline().parameters.environment,variables('single_quote'))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    },
                    "faq_folder": {
                        "type": "string",
                        "defaultValue": "faq"
                    },
                    "gc_tenant": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    }
                },
                "variables": {
                    "emailBody": {
                        "type": "String"
                    },
                    "to_email": {
                        "type": "String",
                        "defaultValue": "rushik.shah@nitorinfotech.com"
                    },
                    "from_email": {
                        "type": "String",
                        "defaultValue": "rushik.shah@symphonysummit.com"
                    },
                    "single_quote": {
                        "type": "String",
                        "defaultValue": "'"
                    },
                    "runQuery": {
                        "type": "String",
                        "defaultValue": "declare @val varchar(max) = ''; select @val = COALESCE(@val,'') + '<tr ' + case when JSON_VALUE(jsonVal,'$.rowsRead') > JSON_VALUE(jsonVal, '$.rowsCopied') then ' style=color:red' else '' end + ' ><td>'+table_name+'</td><td class=centerAlign>'+tenant+'</td><td class=centerAlign>'+ source_name+'</td><td class=centerAlign>'+JSON_VALUE(jsonVal,'$.rowsRead')+'</td><td class=centerAlign>'+JSON_VALUE(jsonVal, '$.rowsCopied')+'</td><td class=centerAlign>'+JSON_VALUE(jsonVal, '$.copyDuration')+'</td><td class=centerAlign>'+status+'</td></tr>' from (select table_name,tenant,status,case source_name when 'source1' then 'SUMMIT-SQL' when 'source2' then 'GOLDEN-CATALOG' when 'source3' then 'CINDE-SQL' end as source_name,replace(replace(replace([message],'copy pipeline',''),'Success',''),'Error','') as jsonVal from table_injestion_monitor where RunID='@RunID' ) t; select '<html><style> .centerAlign { text-align: center; } tr:nth-child(even) {  background-color: #eee;}table tr:nth-child(odd) {  background-color: #fff;}table th {  color: white;  background-color: CornflowerBlue;  font-family: Arial, Helvetica, sans-serif;}table {  width: 70%}</style><h3>Below are the stats of Data Integration Pipeline Run Activity:</h3><br/><table><tr><th>TableName</th><th>TenantName</th><th>SourceName</th><th>RowsRead from source</th><th>RowsCopied to Target</th><th>CopyDuration (sec)</th><th>Status</th></tr>' + @val + '</table><p>Note: Please do not reply to this email.</p></html>'"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-11-23T07:52:13Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/pipelines/copy_csv_data')]",
                "[concat(variables('factoryId'), '/pipelines/delta_pull_SQL_pipeline_others')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/pipelines/delta_pull_SQL_pipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/tenant-API-copy-pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "getTenants",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": "select Tenant from Tenant_master where status = 'ACTIVE' and sor='SUMMIT-API'",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@activity('InstaceLookup').output.firstRow.sys_username",
                                    "password": "@activity('InstaceLookup').output.firstRow.sys_password"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "getTenants",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('getTenants').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute Pipeline1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "API-copy-pipeline",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "tenant": {
                                                "value": "@item().Tenant",
                                                "type": "Expression"
                                            },
                                            "domain": " ",
                                            "singleQuote": "'",
                                            "FirstPull": "true",
                                            "IsDeltaPullPipeline": "false",
                                            "sink_username": {
                                                "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                                "type": "Expression"
                                            },
                                            "sink_password": {
                                                "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                                "type": "Expression"
                                            },
                                            "sys_username": {
                                                "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                                "type": "Expression"
                                            },
                                            "sys_password": {
                                                "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "FailureProof",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Pipeline1",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[eu_fp_monitor_closure]",
                                        "storedProcedureParameters": {
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('Execute Pipeline1').output , activity('Execute Pipeline1').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RUNID": {
                                                "value": {
                                                    "value": "@json(string(activity('Execute Pipeline1').output)).pipelineRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@activity('InstanceLookup').output.firstRow.sys_password",
                                            "username": "@activity('InstanceLookup').output.firstRow.sys_username"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "InstanceLookup",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select sink_username, sink_password, sys_username, sys_password  from instance_master where instance_id = @{pipeline().parameters.Instance_ID}",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/pipelines/API-copy-pipeline')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/api-based-delta-pull-pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "initPipelineProcess",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[eu_pull_init]",
                            "storedProcedureParameters": {
                                "domain": {
                                    "value": {
                                        "value": "@pipeline().parameters.Domain",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "FirstPull": {
                                    "value": "false",
                                    "type": "Boolean"
                                },
                                "IsDeltaPullPipeline": {
                                    "value": "true",
                                    "type": "Boolean"
                                },
                                "RUNID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "SOR": {
                                    "value": "SUMMIT-API",
                                    "type": "String"
                                },
                                "Tenant": {
                                    "value": {
                                        "value": "@pipeline().parameters.Tenant",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "eureka_system",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "username": "@pipeline().parameters.sys_username",
                                "password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "fetchItemsToProcess",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "initPipelineProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select a.table_name,\na.watermark_column, c.temp_table,\na.SelectQueryTenant as TenantWiseSelectRows , \nStoredProcedureNameForUpsertOperation, SA_jsonPathExpression ,\nSA_Structure as structure,  c.sink_table_name \nfrom table_master a\nINNER JOIN table_injestion_monitor b ON a.table_name = b.table_name \nINNER JOIN table_tenant_mapping_variables c ON  c.tenant = b.tenant AND c.table_name = b.table_name\nWHERE b.RUNID = '@{pipeline().RunId}';",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": {
                                        "value": "@pipeline().parameters.sys_username",
                                        "type": "Expression"
                                    },
                                    "password": {
                                        "value": "@pipeline().parameters.sys_password",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "fetchItemsToProcess",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('fetchItemsToProcess').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Execute Pipeline1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "api-delta-pull-core-pipeline",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Table_name": {
                                                "value": "@item().table_name",
                                                "type": "Expression"
                                            },
                                            "Tenant": {
                                                "value": "@pipeline().parameters.Tenant",
                                                "type": "Expression"
                                            },
                                            "Domain": {
                                                "value": "@pipeline().parameters.Domain",
                                                "type": "Expression"
                                            },
                                            "Structure": {
                                                "value": "@json(item().Structure)",
                                                "type": "Expression"
                                            },
                                            "StoredProcedureNameForUpsertOperation": {
                                                "value": "@item().StoredProcedureNameForUpsertOperation",
                                                "type": "Expression"
                                            },
                                            "PageSize": {
                                                "value": "@int('1000')",
                                                "type": "Expression"
                                            },
                                            "temp_table": {
                                                "value": "@item().temp_Table",
                                                "type": "Expression"
                                            },
                                            "SINK_TABLE_NAME": {
                                                "value": "@item().sink_table_name",
                                                "type": "Expression"
                                            },
                                            "TenantWiseSelectRows": {
                                                "value": "@item().TenantWiseSelectRows",
                                                "type": "Expression"
                                            },
                                            "WaterMark_Column": {
                                                "value": "@item().WaterMark_Column",
                                                "type": "Expression"
                                            },
                                            "SA_jsonPathExpression": {
                                                "value": "@item().SA_jsonPathExpression",
                                                "type": "Expression"
                                            },
                                            "sink_username": {
                                                "value": "@pipeline().parameters.sink_username",
                                                "type": "Expression"
                                            },
                                            "sink_password": {
                                                "value": "@pipeline().parameters.sink_username",
                                                "type": "Expression"
                                            },
                                            "sys_username": {
                                                "value": "@pipeline().parameters.sys_username",
                                                "type": "Expression"
                                            },
                                            "sys_password": {
                                                "value": "@pipeline().parameters.sys_password",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Stored Procedure1",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Pipeline1",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[eu_fp_monitor_failure]",
                                        "storedProcedureParameters": {
                                            "EndTime": {
                                                "value": {
                                                    "value": "@utcnow()",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('Execute Pipeline1').output, activity('Execute Pipeline1').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pipelineID": {
                                                "value": {
                                                    "value": "@pipeline().Pipeline",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RunID": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartTime": {
                                                "value": {
                                                    "value": "@pipeline().TriggerTime",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "Status": {
                                                "value": "FAILURe",
                                                "type": "String"
                                            },
                                            "TableName": {
                                                "value": {
                                                    "value": "@item().table_name",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "Tenant": {
                                                "value": {
                                                    "value": "@pipeline().parameters.Tenant",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "TriggerCondition": {
                                                "value": {
                                                    "value": "@pipeline().TriggerName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": {
                                                "value": "@pipeline().parameters.sys_password",
                                                "type": "Expression"
                                            },
                                            "username": "@pipeline().parameters.sys_username"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "serviceBusNotification",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Execute_Full_copy",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://eureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net/general/messages",
                            "method": "POST",
                            "headers": {
                                "Authorization": "SharedAccessSignature sr=http%3A%2F%2Feureka-sb-Golden-Catalog-Mtenant-RnD.servicebus.windows.net%2F&sig=ojF8%2BSnw6RY2j7tsexRpkM3DSpZ2AbDEeE76J3mPf%2Bo%3D&se=1632212088&skn=Send",
                                "Content-Type": "application/json",
                                "component": "data_ingestion",
                                "event": "pipeline_completed"
                            },
                            "body": {
                                "value": "{ \"pipeline_name\": '@{pipeline().Pipeline}' ,\n \"tenant\" : '@{pipeline().parameters.Tenant}' ,\n\"domain\" : '@{pipeline().parameters.domain}' ,\n\"first_pull\" : 'false'\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Execute_Full_copy",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "API-copy-pipeline",
                                "type": "PipelineReference"
                            },
                            "parameters": {
                                "tenant": {
                                    "value": "@pipeline().parameters.Tenant",
                                    "type": "Expression"
                                },
                                "domain": {
                                    "value": "@pipeline().parameters.Domain",
                                    "type": "Expression"
                                },
                                "singleQuote": "'",
                                "FirstPull": "false",
                                "IsDeltaPullPipeline": "false",
                                "sink_username": {
                                    "value": "@pipeline().parameters.sink_username",
                                    "type": "Expression"
                                },
                                "sink_password": {
                                    "value": "@pipeline().parameters.sink_password",
                                    "type": "Expression"
                                },
                                "sys_username": {
                                    "value": "@pipeline().parameters.sys_username",
                                    "type": "Expression"
                                },
                                "sys_password": {
                                    "value": "@pipeline().parameters.sys_password",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "parameters": {
                    "Tenant": {
                        "type": "String"
                    },
                    "Domain": {
                        "type": "String"
                    },
                    "sink_username": {
                        "type": "String"
                    },
                    "sink_password": {
                        "type": "String"
                    },
                    "sys_username": {
                        "type": "String"
                    },
                    "sys_password": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/pipelines/API-copy-pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/api-delta-pull-core-pipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/tenant-Api-Delta-pull-Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "iterate over tenant for delta pull",
                "activities": [
                    {
                        "name": "getTenants",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "InstanceLookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": "select Tenant from Tenant_master where status = 'ACTIVE' and sor='SUMMIT-API'",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system",
                                "type": "DatasetReference",
                                "parameters": {
                                    "username": "@activity('InstaceLookup').output.firstRow.sys_username",
                                    "password": "@activity('InstaceLookup').output.firstRow.sys_password"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "getTenants",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('getTenants').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute Pipeline1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "api-based-delta-pull-pipeline",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "Tenant": {
                                                "value": "@item().Tenant",
                                                "type": "Expression"
                                            },
                                            "Domain": " ",
                                            "sink_username": {
                                                "value": "@activity('InstanceLookup').output.firstRow.sink_username",
                                                "type": "Expression"
                                            },
                                            "sink_password": {
                                                "value": "@activity('InstanceLookup').output.firstRow.sink_password",
                                                "type": "Expression"
                                            },
                                            "sys_username": {
                                                "value": "@activity('InstanceLookup').output.firstRow.sys_username",
                                                "type": "Expression"
                                            },
                                            "sys_password": {
                                                "value": "@activity('InstanceLookup').output.firstRow.sys_password",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "FailureProof",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Execute Pipeline1",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[eu_fp_monitor_closure]",
                                        "storedProcedureParameters": {
                                            "failure_message": {
                                                "value": {
                                                    "value": "@concat(activity('Execute Pipeline1').output , activity('Execute Pipeline1').Error)",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "RUNID": {
                                                "value": {
                                                    "value": "@json(string(activity('Execute Pipeline1').output)).pipelineRunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "eureka_system",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "password": "@activity('InstaceLookup').output.firstRow.sys_username",
                                            "username": "@activity('InstaceLookup').output.firstRow.sys_username"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "InstanceLookup",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlSource",
                                "sqlReaderQuery": {
                                    "value": "select sink_username, sink_password, sys_username, sys_password  from instance_master where instance_id = @{pipeline().parameters.Instance_ID}",
                                    "type": "Expression"
                                },
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "eureka_system_common",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    }
                ],
                "parameters": {
                    "Instance_ID": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2020-09-28T12:03:08Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/eureka_system')]",
                "[concat(variables('factoryId'), '/datasets/eureka_system_common')]",
                "[concat(variables('factoryId'), '/pipelines/api-based-delta-pull-pipeline')]",
                "[concat(variables('factoryId'), '/linkedServices/eureka_system')]"
            ]
        }
    ]
}